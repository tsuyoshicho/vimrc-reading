# colorscheme
# repo a-z(username) sorted.
# but support plugin(only lightline/airline) are stored to original below.

[[plugins]] # カラースキーム
repo = 'AlessandroYorba/Alduin'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'alduin'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'AlessandroYorba/Arcadia'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'arcadia'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']

  " " Dark Grey Background
  " let g:arcadia_Sunset = 1
  " " Even Darker Grey Background
  " let g:arcadia_Twilight = 1
  " " Almost Black Background
  " let g:arcadia_Midnight = 1
  " " Black Background
  " let g:arcadia_Pitch = 1
'''

[[plugins]] # カラースキーム
repo = 'AlessandroYorba/Breve'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'breve'
  let s:scheme['background'] = 'light'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'AlessandroYorba/Despacio'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'despacio'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']

  " " Dark Grey Background
  " let g:despacio_Sunset = 1
  " " Even Darker Grey Background
  " let g:despacio_Twilight = 1
  " " Almost Black Background
  " let g:despacio_Midnight = 1
  " " Black Background
  " let g:despacio_Pitch = 1
'''

[[plugins]] # カラースキーム
repo = 'AlessandroYorba/Sierra'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'sierra'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']

  " " Dark Grey Background
  " let g:sierra_Sunset = 1
  " " Even Darker Grey Background
  " let g:sierra_Twilight = 1
  " " Almost Black Background
  " let g:sierra_Midnight = 1
  " " Black Background
  " let g:sierra_Pitch = 1
'''

[[plugins]] # カラースキーム
repo = 'Haron-Prime/Antares'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'antares'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'KKPMW/moonshine-vim'
hook_add = '''
  for s:name in ['moonshine', 'moonshine_lowcontrast', 'moonshine_minimal']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = s:name
    let s:scheme['background'] = 'dark'
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'KabbAmine/yowish.vim'
hook_add = '''
  for airline in ['yowish', 'yowishU']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'yowish'
    let s:scheme['lightline']  = 'yowish'
    let s:scheme['airline']    =  airline
    let s:scheme['background'] = 'dark'
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'NLKNguyen/papercolor-theme'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'PaperColor'
    let s:scheme['lightline']  = 'PaperColor'
    let s:scheme['airline']    = 'papercolor'
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['16', '256', 'termguicolors', 'gui']
  endfor

  let g:PaperColor_Theme_Options = {
    \   'theme': {
    \     'default': {
    \       'transparent_background': 1
    \     }
    \   },
    \   'language': {
    \     'python': {
    \       'highlight_builtins' : 1
    \     },
    \     'cpp': {
    \       'highlight_standard_library': 1
    \     },
    \     'c': {
    \       'highlight_builtins' : 1
    \     }
    \   }
    \ }
'''

[[plugins]] # カラースキーム
repo = 'Rigellute/rigel'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'rigel'
  let s:scheme['lightline']  = 'rigel'
  let s:scheme['airline']    = 'rigel'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']

  let g:rigel_lightline = 1
  let g:rigel_airline = 1
'''

[[plugins]] # カラースキーム
repo = 'Rigellute/shades-of-purple.vim'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'shades_of_purple'
  let s:scheme['lightline']  = 'shades_of_purple'
  let s:scheme['airline']    = 'shades_of_purple'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['termguicolors', 'gui']

  let g:shades_of_purple_airline = 1
  let g:shades_of_purple_lightline = 1
'''

[[plugins]] # カラースキーム
repo = 'TroyFletcher/vim-colors-synthwave'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'synthwave'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'aereal/vim-colors-japanesque'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'japanesque'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'agude/vim-eldar'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'eldar'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['16', '256', 'termguicolors', 'gui']

  " tuning
  " if has('gui_runnning')
  "   let g:eldar_red     = "#ff0000"
  "   let g:eldar_yellow  = "#ffff00"
  "   let g:eldar_green   = "#00ff00"
  "   let g:eldar_cyan    = "#00ffff"
  "   let g:eldar_blue    = "#0000ff"
  "   let g:eldar_magenta = "#ff00ff"
  "   " GUI
  "   let g:eldar_text        = "#D3D3D3"
  "   let g:eldar_background  = "#2B2B2B"
  " else
  "   " CLI
  "   let g:eldar_term_text        = "White"
  "   let g:eldar_term_background  = "Black"
  " endif
'''

[[plugins]] # カラースキーム
repo = 'ajgrf/parchment'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'parchment'
  let s:scheme['background'] = 'light'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'altercation/vim-colors-solarized'
hook_add = '''
  " https://teratail.com/questions/37382
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'solarized'
    let s:scheme['lightline']  = 'solarized' " built-in
    if s:bg ==? 'dark'
      let s:scheme['lightline']  = 'solarized_dark' " built-in
    endif
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor

  " if has('gui_running')
  "   set background=light
  " else
  "   set background=dark
  "   " set background=light
  "
  "   if stridx($TERM, "xterm-256color") >= 0
  "     set background=dark
  "     " set background=light
  "
  "     " let g:solarized_termcolors= 256
  "     " let g:solarized_contrast = "high"
  "     let g:solarized_termtrans = 1
  "   elseif stridx($TERM, "cygwin") >= 0
  "     " set background=dark
  "     set background=light
  "
  "     "let g:solarized_termcolors= 256
  "     let g:solarized_termtrans = 1
  "   elseif ($ConEmuANSI == 'ON')
  "     set background=dark
  "     " set background=light
  "
  "     let g:solarized_termcolors= 256
  "     " let g:solarized_contrast = "high"
  "     " let g:solarized_termtrans = 1
  "     " let g:solarized_visibility='low'
  "   else
  "     "set background=dark
  "     set background=light
  "
  "     let g:solarized_termcolors= 16
  "     let g:solarized_termtrans = 0
  "     let g:solarized_visibility='low'
  "   endif
  " endif
  "
'''
hook_post_source = '''
  " " call mapping function
  " call togglebg#map("<F5>")
'''

[[plugins]] # カラースキーム
repo = 'arzg/vim-colors-xcode'
hook_add = '''
  for s:bg in ['light', 'dark']
    for s:name in ['xcode' . s:bg, 'xcode' . s:bg .'hc']
      let s:scheme = deepcopy(g:user.template.colorscheme)
      call add(g:user.colorscheme, s:scheme)

      let s:scheme['name']       = s:name
      let s:scheme['background'] = s:bg
      let s:scheme['mode']       = ['termguicolors', 'gui']
    endfor
  endfor
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'xcodewwdc'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['termguicolors', 'gui']

  " light
  let g:xcodelight_green_comments    = 1 " default: 0
  let g:xcodelight_dim_punctuation   = 1 " default: 0
  let g:xcodelight_emph_types        = 0 " default: 1
  let g:xcodelight_emph_funcs        = 1 " default: 0
  let g:xcodelight_emph_idents       = 1 " default: 0
  let g:xcodelight_match_paren_style = 1 " default: 0

  " lighthc
  let g:xcodelighthc_green_comments    = 1 " default: 0
  let g:xcodelighthc_dim_punctuation   = 1 " default: 0
  let g:xcodelighthc_emph_types        = 0 " default: 1
  let g:xcodelighthc_emph_funcs        = 1 " default: 0
  let g:xcodelighthc_emph_idents       = 1 " default: 0
  let g:xcodelighthc_match_paren_style = 1 " default: 0

  " dark
  let g:xcodedark_green_comments    = 1 " default: 0
  let g:xcodedark_dim_punctuation   = 1 " default: 0
  let g:xcodedark_emph_types        = 0 " default: 1
  let g:xcodedark_emph_funcs        = 1 " default: 0
  let g:xcodedark_emph_idents       = 1 " default: 0
  let g:xcodedark_match_paren_style = 1 " default: 0

  " darkhc
  let g:xcodedarkhc_green_comments    = 1 " default: 0
  let g:xcodedarkhc_dim_punctuation   = 1 " default: 0
  let g:xcodedarkhc_emph_types        = 0 " default: 1
  let g:xcodedarkhc_emph_funcs        = 1 " default: 0
  let g:xcodedarkhc_emph_idents       = 1 " default: 0
  let g:xcodedarkhc_match_paren_style = 1 " default: 0

  " wwdc
  let g:xcodewwdc_dim_punctuation   = 1 " default: 0
  let g:xcodewwdc_emph_types        = 0 " default: 1
  let g:xcodewwdc_emph_funcs        = 1 " default: 0
  let g:xcodewwdc_emph_idents       = 1 " default: 0
  let g:xcodewwdc_match_paren_style = 1 " default: 0
'''

[[plugins]] # カラースキーム
repo = 'arzg/vim-substrata'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'substrata'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'bluz71/vim-moonfly-colors'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'moonfly'
  let s:scheme['lightline']  = 'moonfly'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['16', '256', 'termguicolors', 'gui']
  " 16 need
  " let g:moonflyTerminalColors = 0
'''

[[plugins]] # カラースキーム
repo = 'caksoylar/vim-mysticaltutor'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'mysticaltutor'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['16', '256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'challenger-deep-theme/vim'
name = 'challenger-deep-theme'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'challenger_deep'
  let s:scheme['lightline']  = 'challenger_deep'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'chriskempson/vim-tomorrow-theme'
hook_add = '''
  for [s:name, s:lightline] in [
      \ ['Tomorrow'                , 'Tomorrow'               ] ,
      \ ['Tomorrow-Night'          , 'Tomorrow_Night'         ] ,
      \ ['Tomorrow-Night-Blue'     , 'Tomorrow_Night_Blue'    ] ,
      \ ['Tomorrow-Night-Bright'   , 'Tomorrow_Night_Bright'  ] ,
      \ ['Tomorrow-Night-Eighties' , 'Tomorrow_Night_Eighties'] ,
      \]
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = s:name
    let s:scheme['lightline']  = s:lightline " all built-in in lightline
    let s:scheme['background'] = 'dark'
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'chuling/vim-equinusocio-material'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'equinusocio_material'
  let s:scheme['lightline']  = 'equinusocio_material'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['termguicolors', 'gui']

  " if you prefer the default one, comment out this line
  let g:equinusocio_material_darker = 1

  " make vertsplit invisible
  let g:equinusocio_material_hide_vertsplit = 1
'''

[[plugins]] # カラースキーム
repo = 'cocopon/iceberg.vim'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'iceberg'
  let s:scheme['lightline']  = 'iceberg'
  let s:scheme['airline']    = 'iceberg'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム (iceberg support & variant)
repo = 'gkeep/iceberg-dark'
depends = ['iceberg.vim']
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'iceberg'
  let s:scheme['lightline']  = 'icebergDark'
  let s:scheme['airline']    = 'icebergDark'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'cormacrelf/vim-colors-github'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'github'
  let s:scheme['lightline']  = 'github'
  let s:scheme['airline']    = 'github'
  let s:scheme['background'] = 'light'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']

  " use a slightly darker background, like GitHub inline code blocks
  let g:github_colors_soft = 1

  " more blocky diff markers in signcolumn (e.g. GitGutter)
  let g:github_colors_block_diffmark = 1
'''

[[plugins]] # カラースキーム
repo = 'creasty/candle.vim'
name = 'candle-colorscheme'
merged = 0
hook_add = '''
  " https://github.com/creasty/candle-theme
  " name conflict https://github.com/hrsh7th/vim-candle
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'candle'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'davidosomething/vim-colors-meh'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'meh'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'fcpg/vim-orbital'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'orbital'
  let s:scheme['lightline']  = 'orbital'
  let s:scheme['airline']    = 'orbital'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['16', '256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'franbach/miramare'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'miramare'
  let s:scheme['airline']    = 'miramare'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['16', '256', 'termguicolors', 'gui']

  let g:miramare_disable_italic_comment = 1
'''

[[plugins]] # カラースキーム
repo = 'freeo/vim-kalisi'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'kalisi'
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'habamax/vim-colors-defminus'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'defminus'
  let s:scheme['background'] = 'light'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'habamax/vim-colors-defnoche'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'defnoche'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'icymind/NeoSolarized'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'NeoSolarized'
    let s:scheme['lightline']  = 'solarized_improved' " built-in in lightline-delphinus
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['termguicolors', 'gui']
  endfor

  " Default value is "normal", Setting this option to "high" or "low" does use the
  " same Solarized palette but simply shifts some values up or down in order to
  " expand or compress the tonal range displayed.
  " let g:neosolarized_contrast = "normal"

  " Special characters such as trailing whitespace, tabs, newlines, when displayed
  " using ":set list" can be set to one of three levels depending on your needs.
  " Default value is "normal". Provide "high" and "low" options.
  " let g:neosolarized_visibility = "normal"

  " I make vertSplitBar a transparent background color. If you like the origin
  " solarized vertSplitBar style more, set this value to 0.
  " let g:neosolarized_vertSplitBgTrans = 1

  " If you wish to enable/disable NeoSolarized from displaying bold, underlined
  " or italicized" typefaces, simply assign 1 or 0 to the appropriate variable.
  " Default values:
  " let g:neosolarized_bold = 1
  " let g:neosolarized_underline = 1
  " let g:neosolarized_italic = 0

  " Used to enable/disable "bold as bright" in Neovim terminal. If colors of bold
  " text output by commands like `ls` aren't what you expect, you might want to
  " try disabling this option. Default value:
  " let g:neosolarized_termBoldAsBright = 1
'''

[[plugins]] # カラースキーム
repo = 'jacoborus/tender.vim'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'tender'
  let s:scheme['lightline']  = 'tender'
  let s:scheme['airline']    = 'tender'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'jaredgorski/fogbell.vim'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'fogbell'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']

  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'fogbell_light'
  let s:scheme['background'] = 'light'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']

  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'fogbell_lite'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'jeetsukumaran/vim-nefertiti'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'nefertiti'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'jonathanfilip/vim-lucius'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'lucius'
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor

  " let g:lucius_contrast     = 'normal'
  " let g:lucius_contrast_bg  = 'normal'
'''

[[plugins]] # カラースキーム
repo = 'kaicataldo/material.vim'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'material'
  " let s:scheme['lightline']  = 'material'    " built-in lightline
  let s:scheme['lightline']  = 'material_vim' " bundle
  let s:scheme['airline']    = 'material'
  let s:scheme['background'] = 'dark' " ligher is only 'light' background
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']

  " let g:material_terminal_italics = 1

  " 'default' | 'palenight' | 'ocean' | 'lighter' | 'darker'
  let g:material_theme_style = 'ocean'
'''

[[plugins]] # カラースキーム
repo = 'kamykn/dark-theme.vim'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'darktheme'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'kjssad/quantum.vim'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'quantum'
    let s:scheme['lightline']  = 'quantum'
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'lifepillar/vim-solarized8'
hook_add = '''
  " https://teratail.com/questions/37382
  for s:name in [
      \ 'solarized8_high',
      \ 'solarized8',
      \ 'solarized8_low',
      \ 'solarized8_flat',
      \]
    for s:bg in ['light', 'dark']

      let s:scheme = deepcopy(g:user.template.colorscheme)
      call add(g:user.colorscheme, s:scheme)

      let s:scheme['name']       = s:name
      let s:scheme['lightline']  = 'solarized_improved' " built-in in lightline-delphinus
      let s:scheme['background'] = s:bg
      let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
    endfor
  endfor

  " if has('gui_running')
  "   set background=light
  " else
  "   set background=dark
  "
  "   if stridx($TERM, "xterm-256color") >= 0
  "     set background=dark
  "     let g:solarized_termtrans = 1
  "     " tmux and/or true color : right color
  "     " let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  "     " let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  "   elseif stridx($TERM, "cygwin") >= 0
  "     set background=light
  "     let g:solarized_termtrans = 1
  "   elseif ($ConEmuANSI == 'ON')
  "     set background=light
  "     " let g:solarized_termtrans = 1
  "   " elseif (has('vtp') && has('vcon')) " currently off
  "   "   set background=light
  "   else
  "     let g:solarized_use16 = 1
  "   endif
  " endif
  "
'''

[[plugins]] # カラースキーム
repo = 'logico/typewriter-vim'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = s:bg ==? 'light' ? 'typewriter' : 'typewriter-night'
    let s:scheme['lightline']  = 'typewriter_' . s:bg
    let s:scheme['airline']    = 'typewriter'
    let s:scheme['background'] = 'light'
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'lucasprag/simpleblack'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'simpleblack'
  let s:scheme['lightline']  = 'simpleblack' " built-in
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'machakann/vim-colorscheme-reki'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'reki'
    let s:scheme['lightline']  = ''
    let s:scheme['airline']    = ''
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'machakann/vim-colorscheme-snowtrek'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'snowtrek'
  let s:scheme['background'] = 'light'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'machakann/vim-colorscheme-tatami'
# " colorscheme : 'tatami'
# " lightline   : '<none>'
# " airline     : '<none>'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = ''
  let s:scheme['lightline']  = ''
  let s:scheme['airline']    = ''
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'mhinz/vim-janah'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'janah'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'morhetz/gruvbox'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'gruvbox'
    let s:scheme['lightline']  = 'gruvbox'
    let s:scheme['airline']    = 'gruvbox'
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'nanotech/jellybeans.vim'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'jellybeans'
  let s:scheme['lightline']  = 'jellybeans' " built-in
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['16', '256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
# repo = 'nightsense/snow'
repo = 'tsuyoshicho/snow'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'snow'
    let s:scheme['lightline']  = 'snow_' . s:bg
    let s:scheme['airline']    = 'snow_' . s:bg
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'noahfrederick/vim-noctu'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'noctu'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['16', '256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'phanviet/vim-monokai-pro'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'monokai_pro'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'rakr/vim-one'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'one'
    let s:scheme['lightline']  = 'one' " built-in
    let s:scheme['airline']    = 'one'
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'rakr/vim-two-firewatch'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'two-firewatch'
    let s:scheme['lightline']  = 'twofirewatch'
    let s:scheme['airline']    = 'twofirewatch'
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'reedes/vim-colors-pencil'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'pencil'
    let s:scheme['airline']    = 'pencil'
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'rhysd/vim-color-spring-night'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'spring-night'
  let s:scheme['airline']    = 'spring-night'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'romainl/Apprentice'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'apprentice'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['16', '256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'sainnhe/vim-color-forest-night'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'forest-night'
  let s:scheme['lightline']  = 'forest_night'
  let s:scheme['airline']    = 'forest_night'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'sainnhe/gruvbox-material'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'gruvbox-material'
    let s:scheme['lightline']  = 'gruvbox_material'
    let s:scheme['airline']    = 'gruvbox_material'
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['termguicolors', 'gui']
  endfor

  " let g:gruvbox_material_background             = 'medium'
  " let g:gruvbox_material_palette                = 'material'
  " let g:gruvbox_material_transparent_background =  0
  " let g:gruvbox_material_cursor_line_contrast   = 'lower'
'''

[[plugins]] # カラースキーム
repo = 'sjl/badwolf'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'badwolf'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'srcery-colors/srcery-vim'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'srcery'
  let s:scheme['lightline']  = 'srcery'
  let s:scheme['airline']    = 'srcery'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'tlhr/anderson.vim'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'anderson'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'tomasr/molokai'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'molokai'
  let s:scheme['lightline']  = 'molokai' " built-in
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'toupeira/vim-desertink'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'desertink'
  let s:scheme['airline']    = 'desertink'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'tyrannicaltoucan/vim-deep-space'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'deep-space'
  let s:scheme['lightline']  = 'deepspace'
  let s:scheme['airline']    = 'deep_space'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'w0ng/vim-hybrid'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'hybrid'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'wadackel/vim-dogrun'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'dogrun'
  let s:scheme['lightline']  = 'dogrun'
  let s:scheme['clap']       = 'dogrun'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'yasukotelin/shirotelin'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'shirotelin'
  let s:scheme['lightline']  = ''
  let s:scheme['airline']    = ''
  let s:scheme['background'] = 'light'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'yous/vim-open-color'
hook_add = '''
  for s:bg in ['light', 'dark']
    let s:scheme = deepcopy(g:user.template.colorscheme)
    call add(g:user.colorscheme, s:scheme)

    let s:scheme['name']       = 'open-color'
    let s:scheme['background'] = s:bg
    let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
  endfor
'''

[[plugins]] # カラースキーム
repo = 'yuttie/hydrangea-vim'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'hydrangea'
  let s:scheme['lightline']  = 'hydrangea'
  let s:scheme['background'] = 'dark'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

[[plugins]] # カラースキーム
repo = 'yuttie/inkstained-vim'
hook_add = '''
  let s:scheme = deepcopy(g:user.template.colorscheme)
  call add(g:user.colorscheme, s:scheme)

  let s:scheme['name']       = 'inkstained'
  let s:scheme['lightline']  = 'inkstained'
  let s:scheme['background'] = 'light'
  let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
'''

# [[plugins]] # カラースキーム
# repo = 'https://github.com/jan-warchol/selenized'
# " in subdir editors/vim
# " colorscheme : 'selenized'
# " lightline   : 'selenized_dark' " built-in
# " airline     : '<none>'
# hook_add = '''
#   let s:scheme = deepcopy(g:user.template.colorscheme)
#   call add(g:user.colorscheme, s:scheme)
#
#   let s:scheme['name']       = 'selenized' " bw?
#   let s:scheme['lightline']  = 'selenized_dark' " built-in
#   let s:scheme['background'] = 'dark'      " light?
#   let s:scheme['mode']       = ['256', 'termguicolors', 'gui']
# '''

# EOF
