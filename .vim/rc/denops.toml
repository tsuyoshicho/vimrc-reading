# denops need deno

# shared server install/uninstaller
[[plugins]]
repo = 'vim-denops/denops-shared-server.vim'

# core
[[plugins]]
repo = 'vim-denops/denops.vim'
hook_add = '''
  " " when do not use shared server, disable it
  " let g:denops_server_addr = '127.0.0.1:32123'
  " let s:denops_path = g:dein#plugin.path
  " if has('nvim')
  "     call jobstart(
  "     \    'deno run -A --no-check ' . s:denops_path . '/denops/@denops-private/cli.ts',
  "     \    {'detach': v:true}
  "     \)
  " else
  "     call job_start(
  "     \   'deno run -A --no-check ' . s:denops_path . '/denops/@denops-private/cli.ts',
  "     \   {'stoponexit': ''}
  "     \)
  " endif
'''

[[plugins]] # github status
repo = 'yutkat/dps-coding-now.nvim'
depends = ['denops.vim', 'vim-pass']
hook_add = '''
  " need token into CODING_NOW_GITHUB_TOKEN
  call pass#get_startup('$CODING_NOW_GITHUB_TOKEN', 'Develop/Github')
'''

# When deno is nothing, do not load this toml.
# load below that is fallback.
# ref lambdalisue/edita.vim without denops,deprecated
[[plugins]]
repo = 'lambdalisue/guise.vim'
depends = ['denops.vim']

[[plugins]]
repo = 'kat0h/bufpreview.vim'
depends = ['denops.vim']

# # gitgutter/signify like
# # now, do not enable(signify is need for lightline)
# [[plugins]]
# repo = 'tennashi/gitsign.vim'
# hook_add = '''
#   let g:gitsign#auto_enable = 1
#
#   let g:gitsign#sign#add_mark               = nr2char(0x271a) " '✚'
#   let g:gitsign#sign#change_mark            = nr2char(0x279c) " '➜'
#   let g:gitsign#sign#delete_mark            = nr2char(0x2718) " '✘'
#   let g:gitsign#sign#delete_first_line_mark = nr2char(0x2717) " '✗'
#
#   " highlight line
#   let g:gitsign#highlight#enable_lines = 1
#   " highlight mark
#   let g:gitsign#highlight#enable_marks = 1
# '''

[[plugins]]
repo = 'uki00a/denops-pomodoro.vim'
lazy = 1
depends = ['denops.vim']
on_cmd = ['PomodoroStart', 'PomodoroPause', 'PomodoroResume', 'PomodoroReset', 'PomodoroEcho']

[[plugins]]
repo = '4513ECHO/denops-gitter.vim'
depends = ['denops.vim', 'vim-pass']
hook_add = '''
  " let g:gitter#token = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
  call pass#get_startup('g:gitter#token', 'Message/Gitter')

  augroup vimrc_init_gitter
    autocmd!
    " 行数を非表示
    " signcolumn を非表示
    " foldcolumn 0
    autocmd FileType gitter
      \   setlocal nonumber norelativenumber
      \ | setlocal signcolumn=no
      \ | setlocal foldcolumn=0

    autocmd User VimPassStartUpResolve echomsg '[gitter] vim-pass complete, reload plugin.'
    autocmd User VimPassStartUpResolve call denops#plugin#reload('gitter')
  augroup END
'''

# need for scorpeon.vim
[[plugins]]
repo = 'microsoft/vscode'
type__depth = 1
if = 0
merged = 0
path = '$XDG_CACHE_HOME/vscode'

[[plugins]]
repo = 'oovm/vscode-toml'
type__depth = 1
if = 0
merged = 0
path = '$XDG_CACHE_HOME/scorpeon/toml'

[[plugins]]
repo = 'emilast/vscode-logfile-highlighter'
type__depth = 1
if = 0
merged = 0
path = '$XDG_CACHE_HOME/scorpeon/log'

[[plugins]]
repo = 'uga-rosa/scorpeon.vim'
depends = ['denops.vim', 'vscode', 'vscode-toml', 'vscode-logfile-highlighter']
hook_add = '''
  " set extensions path
  let g:scorpeon_extensions_path = [
    \ expand('$XDG_CACHE_HOME/vscode/extensions'),
    \ expand('$XDG_CACHE_HOME/scorpeon/'),
    \ ]

  " Currently toml off
  let g:scorpeon_highlight = {
    \ 'enable': ['typescript', 'log'],
    \ 'disable': { -> getfsize(expand('%')) > 2 * 1024 * 1024 }
    \ }
'''

# EOF
