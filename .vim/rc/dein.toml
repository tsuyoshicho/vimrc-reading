# based on http://qiita.com/kawaz/items/ee725f6214f91337b42b
[[plugins]]
repo = 'Shougo/dein.vim'

# Core & Util
[[plugins]]
repo = 'vim-jp/vital.vim'
merged = 0
hook_post_source = '''
  " vital use
  let g:V = vital#of('vital')

  " vitalize need vital git repo
  " need merged=0
  " let g:vitalizer#vital_dir = ...
'''

[[plugins]]
repo = 'lambdalisue/vital-Whisky'
merged = 0
depends = ['vital.vim']

[[plugins]]
repo = 'Shougo/vimproc.vim'
merged = 0
hook_post_update = '''
  " from 0Delta/vimrc
  " if !has('nvim')
  "   call dein#add('roxma/nvim-yarp')
  "   call dein#add('roxma/vim-hug-neovim-rpc')
  " endif

  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  " submode option

  " show submode
  " show lightline status
  let g:submode_always_show_submode = 0  " rel 'showmode' status

  " leave submode keytype not ignore
  let g:submode_keep_leaving_key = 1

  " submode timeout?
  " let g:submode_timeout = 1              " rel 'timeout' status

  " submode timeout len
  let g:submode_timeoutlen = 1000 * 3    " 3sec (unit:msec)
'''
hook_post_source = '''
  " global and basic vim bind setting
  " undo/redo
  call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
  call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
  call submode#leave_with('undo/redo', 'n', '', '<Esc>')
  call submode#map('undo/redo', 'n', '', '-', 'g-')
  call submode#map('undo/redo', 'n', '', 'p', 'g-')
  call submode#map('undo/redo', 'n', '', '+', 'g+')
  call submode#map('undo/redo', 'n', '', 'n', 'g+')

  " tab move
  call submode#enter_with('tabmove', 'n', '', 'gt', 'gt')
  call submode#enter_with('tabmove', 'n', '', 'gT', 'gT')
  call submode#enter_with('tabmove', 'n', '', '<Leader><Left>',  ':tabmove -1<CR>')
  call submode#enter_with('tabmove', 'n', '', '<Leader><Right>', ':tabmove +1<CR>')
  call submode#map('tabmove', 'n', '', 't', 'gt')
  call submode#map('tabmove', 'n', '', 'n', 'gt')
  call submode#map('tabmove', 'n', '', 'T', 'gT')
  call submode#map('tabmove', 'n', '', 'p', 'gT')
  call submode#map('tabmove', 'n', '', '<Left>',  ':tabmove -1<CR>')
  call submode#map('tabmove', 'n', '', 'k',  ':tabmove -1<CR>')
  call submode#map('tabmove', 'n', '', '<Right>', ':tabmove +1<CR>')
  call submode#map('tabmove', 'n', '', 'j', ':tabmove +1<CR>')
'''

# terminal
[[plugins]]
repo = 'kyoh86/vim-editerm'

[[plugins]]
repo = 'tyru/empty-prompt.vim'

[[plugins]]
# repo = 'mtsmfm/vim-cursorline-boost'
repo = 'delphinus/vim-auto-cursorline'

# [[plugins]]
# repo = 'terryma/vim-multiple-cursors'
# hook_add = '''
#   let g:multi_cursor_use_default_mapping = 0
#
#   " Default mapping
#   let g:multi_cursor_start_word_key      = '<C-n>'
#   let g:multi_cursor_select_all_word_key = '<A-n>'
#   let g:multi_cursor_start_key           = 'g<C-n>'
#   let g:multi_cursor_select_all_key      = 'g<A-n>'
#   let g:multi_cursor_next_key            = '<C-n>'
#   let g:multi_cursor_prev_key            = '<C-p>'
#   let g:multi_cursor_skip_key            = '<C-x>'
#   let g:multi_cursor_quit_key            = 'g<Esc>'
# '''

[[plugins]]
repo = 'machakann/vim-swap'
hook_add = '''
  omap i,, <Plug>(swap-textobject-i)
  xmap i,, <Plug>(swap-textobject-i)
  omap a,, <Plug>(swap-textobject-a)
  xmap a,, <Plug>(swap-textobject-a)
'''

[[plugins]]
repo = 'kshenoy/vim-signature'
hook_add = '''
'''

[[plugins]]
repo = 'yuttie/comfortable-motion.vim'
hook_add = '''
  " overwrite j/k motion
  let g:comfortable_motion_scroll_down_key = "j"
  let g:comfortable_motion_scroll_up_key = "k"

  " Friction & Air Resistance
  " default
  " let g:comfortable_motion_interval = 1000.0 / 60
  " let g:comfortable_motion_friction = 80.0
  " let g:comfortable_motion_air_drag = 2.0

  " see https://liginc.co.jp/469142
  " let g:comfortable_motion_interval = 2400.0 / 60
  " let g:comfortable_motion_friction = 100.0
  " let g:comfortable_motion_air_drag = 3.0
'''
hook_post_source = '''
  noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(40)<CR>
  noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-40)<CR>
'''

[[plugins]]
repo = 'justinmk/vim-dirvish'
hook_add = '''
  nmap <Plug>(nomap-dirvish_up) <Plug>(dirvish_up)

  " need git support for 0
  let g:dirvish_relative_paths = 1

  augroup vimrc_init-dirvish
    autocmd!

    " re-map only dirvish
    autocmd FileType dirvish nmap <silent><buffer>
          \ - <Plug>(dirvish_up)

    " Map `t` to open in new tab.
    autocmd FileType dirvish
          \  nnoremap <silent><buffer> t :call dirvish#open('tabedit', 0)<CR>
          \ |xnoremap <silent><buffer> t :call dirvish#open('tabedit', 0)<CR>

    " Map `gr` to reload.
    autocmd FileType dirvish nnoremap <silent><buffer>
          \ gr :<C-U>Dirvish %<CR>

    " Map `gh` to hide dot-prefixed files.  Press `R` to "toggle" (reload).
    autocmd FileType dirvish nnoremap <silent><buffer>
          \ gh :silent keeppatterns g@\v/\.[^\/]+/?$@d _<cr>:setl cole=3<cr>
  augroup END
'''
hook_post_source = '''
  if has('gui_running')
    call dirvish#add_icon_fn({p -> p[-1:]=='/'?'üìÇ':'üìÑ'})
  endif
'''

[[plugins]]
repo = 'lambdalisue/fern.vim'

[[plugins]]
repo = 'tsuyoshicho/vim-pass'
rev  = 'develop'
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['pass']

  " support windows
  let is_windows = has('win32') || has('win64') " later as historical ==|| has('win16') || has('win95')==
  let is_cygwin  = has('win32unix')

  if is_windows
    if !is_cygwin
      " Windows native not MSYS(cygwin) work
      " need native gpg (not /usr/bin/gpg)
      let gpg_32     = exepath('C:\Program Files (x86)\GnuPG\bin\gpg.exe')
      let gpg_native = exepath('C:\Program Files\GnuPG\bin\gpg.exe')

      if executable(gpg_32)
        let g:pass_gpg_path = gpg_32
      elseif executable(gpg_native)
        let g:pass_gpg_path = gpg_native
      endif
    endif
  endif
'''

[[plugins]]
repo = 'mattn/vim-sl'

[[plugins]]
repo = 'thinca/vim-ambicmd'
hook_post_source = '''
  cnoremap <expr> <Space> ambicmd#expand("\<Space>")
  cnoremap <expr> <CR>    ambicmd#expand("\<CR>")
'''

[[plugins]]
repo = 'blueyed/vim-diminactive'

[[plugins]]
repo = 'thinca/vim-singleton'
hook_source = '''
  " non-lazy„ÅÆ„Åü„ÇÅ„ÄÅ‰∏≠„Åß„ÉÅ„Çß„ÉÉ„ÇØ
  if has('clientserver')
    " non-lazy„ÅßsourceÂá¶ÁêÜÊôÇ„ÅØ„É≠„Éº„ÉâÊ∏à„Åø„ÇíÊ¥ªÁî®„Åô„Çã
    " singletonÂÆå‰∫ÜÂæÖ„Å°„É™„Çπ„Éà
    " git editmsg,rebase todo,rebase-xxx PRed
    " hub PRed
    let g:singleton#entrust_pattern = extend({
          \ 'git': [
          \  '/\.git/\%(modules/.\+/\)\?\%(COMMIT_EDIT\|TAG_EDIT\|MERGE_\|SQUASH_\)MSG$',
          \  '/\.git/.*git-rebase-todo$',
          \  '/\.git/.*\.diff$',
          \  '/\.git/\%(modules\|worktrees\)/',
          \  '/\.git/rebase-\%(merge\|apply\)/',
          \ ],
          \ 'hub': [
          \  '/\.git/\%(RELEASE\|PULLREQ\|ISSUE\)_EDITMSG$',
          \ ],
          \ 'test': '/test-entrust\.txt$'
          \}, g:singleton#entrust_pattern, 'keep')
    " singletonÈô§Â§ñ„É™„Çπ„Éà
    let g:singleton#ignore_pattern = extend({
          \ 'test': '/test-ignore\.txt$'
          \}, g:singleton#ignore_pattern, 'keep')

    " singletonÊ©üËÉΩ„ÇíÊúâÂäπ„Å´
    call singleton#enable()
    " debug
    " echom 'singleton enable' .' '. 'group:'.g:singleton#group .' '.  'servername:'.v:servername
  endif
'''

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
  nnoremap <silent> <Leader>S :OverCommandLine<cr>
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
depends = ['context_filetype.vim']
hook_add = '''
  let g:echodoc#enable_at_startup = 1

  if has('nvim')
    let g:echodoc#type = 'floating'
    highlight link EchoDocPopup Pmenu
  elseif has('popupwin') || exists('*popup_create')
    let g:echodoc#type = 'popup'
    highlight link EchoDocPopup Pmenu
  else
    let g:echodoc#type = 'echo'
  endif
'''
hook_post_source = '''
  if (get(g:,'echodoc#type','') ==? 'echo') && (2 > &cmdheight)
    " cmdheight„ÅØÂêÑ„Çø„Éñ„Å´ÂÄ§„Åå‰øùÊåÅ„Åï„Çå„Çã„ÅÆ„Åßtabdo„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã
    tabdo set cmdheight=2
  endif
'''

[[plugins]]
repo = 'rbtnn/vimconsole.vim'
# depends = ['vim-prettyprint'] # non-depend, but if already exist; use PrettyPrint

[[plugins]]
repo = 'thinca/vim-editvar'
# depends = ['vim-prettyprint'] # non-depend, but if already exist; use PrettyPrint

[[plugins]]
repo = 'paroxayte/vwm.vim'

[[plugins]] # color edit
repo = 'rbtnn/vim-coloredit'

[[plugins]] # „Ç´„É©„Éº„Çπ„Ç≠„Éº„Éû sample generator
repo = 'cocopon/colorswatch.vim'

[[plugins]] # „Ç´„É©„Éº„Çπ„Ç≠„Éº„Éû inspect
repo = 'cocopon/inspecthi.vim'

[[plugins]] # „Ç´„É©„Éº„Çπ„Ç≠„Éº„Éû template engine
repo = 'cocopon/pgmnt.vim'
depends = ['inspecthi.vim']

[[plugins]]
repo = 'lifepillar/vim-colortemplate'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

[[plugins]]
repo = 'tpope/vim-sleuth'

[[plugins]]
repo = 'cohama/vim-insert-linenr'

[[plugins]]
repo = 'rickhowe/diffchar.vim'
hook_add = '''
  " disable external diff
  let g:DiffExpr = 0
'''

[[plugins]]
repo = 'will133/vim-dirdiff'

[[plugins]]
# repo = 'thinca/vim-visualstar'
repo = 'haya14busa/vim-asterisk'
hook_post_source = '''
  " setup move to is.vim
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_post_source = '''
  " setup move to is.vim
'''

[[plugins]] # https://rcmdnk.com/blog/2017/11/12/computer-vim/
repo = 'haya14busa/is.vim'
depends = ['vim-asterisk', 'vim-anzu']
hook_post_source = '''
  " keymap : auto

  " based on https://postd.cc/vim-galore-4/
  " n„ÇíÂâçÊñπ„Å∏„ÄÅN„ÇíÂæåÊñπ„Å∏„Å®Âõ∫ÂÆö
  " nnoremap <expr> n  'Nn'[v:searchforward]
  " nnoremap <expr> N  'nN'[v:searchforward]
  " use anzu plugin and setting aggregate

  " integraton anzu
  " map n <Plug>(is-nohl)<Plug>(anzu-n-with-echo)
  " map N <Plug>(is-nohl)<Plug>(anzu-N-with-echo)
  map <expr> n v:searchforward ? '\<Plug>(is-nohl)\<Plug>(anzu-n-with-echo)' : '\<Plug>(is-nohl)\<Plug>(anzu-N-with-echo)'
  map <expr> N v:searchforward ? '\<Plug>(is-nohl)\<Plug>(anzu-N-with-echo)' : '\<Plug>(is-nohl)\<Plug>(anzu-n-with-echo)'

  " integration astarisk
  " stay only
  map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
  map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
  map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
  map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
'''

[[plugins]]
repo = 'mattn/vim-findroot'
# onther airblade/vim-rooter
hook_add = '''
  let g:findroot_patterns = [
            \  'CVS/',
            \  '.git/',
            \  '.svn/',
            \  '.hg/',
            \  '.bzr/',
            \  'Rakefile',
            \  'package.json',
            \  'pom.xml',
            \  'project.clj',
            \  'Pipfile',
            \  '*.csproj',
            \  '*.sln',
            \]
'''

[[plugins]] # yank hist
repo = 'LeafCage/yankround.vim'
depends = ['ctrlp.vim', 'vital.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['yankround']

  let g:yankround_max_history = 40 " default 30
  let g:yankround_use_region_hl = 1

  " auto create dir in plugin
  let g:yankround_dir = expand($XDG_CACHE_HOME . '/' . 'yankround')
'''
hook_post_source = '''
  " keymap
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)

  if get(g:, 'ctrlp_map', '') ==? '<c-p>'
    nmap <expr><C-p> yankround#is_active() ? "\<Plug>(yankround-prev)" : "\<Plug>(ctrlp)"
  else
    nmap <C-p> <Plug>(yankround-prev)
  endif
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]] # yank hist
repo = 'svermeulen/vim-yoink'
# current not configured

# [[plugins]] # yank hist
# repo = 'svermeulen/vim-cutlass'

[[plugins]]
repo = 'y0za/vim-reading-vimrc'

[[plugins]]
repo = 'thinca/vim-showtime'

# Quick Fix
[[plugins]]
repo = 'drmingdrmer/vim-toggle-quickfix'
hook_post_source = '''
  nmap <C-g><C-o> <Plug>window:quickfix:toggle
'''

[[plugins]]
repo = 'itchyny/vim-qfedit'

[[plugins]]
repo = 'yssl/QFEnter'
hook_add = '''
  " ctrlp like
  let g:qfenter_keymap = {}
  let g:qfenter_keymap.open       = ['<CR>', '<2-LeftMouse>']
  let g:qfenter_keymap.vopen      = ['<C-v>']
  let g:qfenter_keymap.hopen      = ['<C-CR>', '<C-s>', '<C-x>']
  let g:qfenter_keymap.topen      = ['<C-t>']
  let g:qfenter_keymap.open_keep  = ['<Leader><CR>',  '<Leader><2-LeftMouse>']
  let g:qfenter_keymap.vopen_keep = ['<Leader><C-v>']
  let g:qfenter_keymap.hopen_keep = ['<Leader><C-CR>', '<Leader><C-s>', '<Leader><C-x>']
  let g:qfenter_keymap.topen_keep = ['<Leader><C-t>']
'''

# Session
# 'tpope/vim-obsession'
# 'dhruvasagar/vim-prosession'
# 'gikmx/vim-ctrlposession'

[[plugins]]
repo = 'deris/vim-rengbang'
# repo = 'tsuyoshicho/vim-rengbang'
# rev  = 'develop'
depends = ['vim-operator-user']
hook_post_source = '''
  " xmap
  " <Plug>(operator-rengbang)
  " <Plug>(operator-rengbang-useprev)
  "
  " You can use following operator.

  " This operator like :'<,'>RengBang (use default options).
  map zS <Plug>(operator-rengbang)
  " This operator like :'<,'>RengBangUsePrev (use previous options).
  map zP <Plug>(operator-rengbang-useprev)

  " see https://vim-jp.org/blog/2015/06/30/visual-ctrl-a-ctrl-x.html
  " visual ctrl-x/ctrl-a
  " vnoremap <c-a> <c-a>gv
  " vnoremap <c-x> <c-x>gv
  " use speeddating if

  " g<C-A> „Å® g<C-X> „Çí‰Ωø„ÅÜ‰∫ã„ÅßÁ∞°Âçò„Å´ÈÄ£Áï™„Çí‰ªò‰∏é„Åô„Çã‰∫ã„ÅåÂá∫Êù•„Çã
'''

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]] # folding support
repo = 'tyru/foldballoon.vim'
hook_post_source = '''
  " set global,default balloon expr / if specific use, override buffer local
  set ballooneval
  set balloonexpr=foldballoon#balloonexpr()
'''

[[plugins]] # folding support
repo = 'LeafCage/foldCC.vim'
hook_post_source = '''
  " based on http://leafcage.hateblo.jp/entry/2013/04/24/053113
  let g:foldCCtext_enable_autofdc_adjuster = 1
  " add Ôê≠ nf-oct-unfold / f42d
  let g:foldCCtext_head = 'nr2char(0xf42d)." ".v:folddashes." "'

  " need post_source for use defined function
  set foldtext=FoldCCtext()
  " overwrite markdown-ex foldtext function
  autocmd MyAutoGroup FileType markdown setlocal foldtext=FoldCCtext()

  " generic folding setting start
  set foldcolumn=3
  set foldlevel=2

  set fillchars=vert:\|

  " highlight Folded gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey29 guifg=Grey80
  " highlight FoldColumn gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue

  " generic folding setting end
'''

[[plugins]] # folding support
repo = 'arecarn/vim-fold-cycle'
hook_source = '''
'''

# [[plugins]] # folding support
# repo = 'pseewald/vim-anyfold'
# # merged = 0

[[plugins]]
repo = 'mattn/wwwrenderer-vim'
depends = ['webapi-vim']

[[plugins]]
repo = 'thinca/vim-prettyprint'
hook_add = '''
  let g:prettyprint_string          = [ 'split', 'raw' ]
  let g:prettyprint_show_expression = 1
'''

[[plugins]]
repo = 's417-lama/carbonpaper.vim'

[[plugins]]
repo = 'kristijanhusak/vim-carbon-now-sh'
hook_post_source = '''
  vnoremap <F5> :CarbonNowSh<CR>
'''

[[plugins]]
repo = 'vim-jp/autofmt'
hook_add = '''
  " based on https://github.com/vim-jp/vimdoc-ja-working/issues/54#issuecomment-395459077
  " based on https://github.com/vim-jp/vimdoc-ja-working/wiki/Guide
  let g:autofmt_allow_over_tw=1

  set formatexpr=autofmt#japanese#formatexpr()

  " formatoptions already configured in vimrc (after load vimrc work)
  " set formatoptions+=mM or mB

  " smartindent already enable (after load vimrc work)
  " set smartindent

  set colorcolumn=+1
'''

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_mode = 'nv'
'''

[[plugins]]
# repo = 'tpope/vim-repeat'
repo = 'kana/vim-repeat'

[[plugins]]
repo = 'tpope/vim-unimpaired'
depends = ['vim-repeat']
hook_post_source = '''
  " nmap < [
  " nmap > ]
  " omap < [
  " omap > ]
  " xmap < [
  " xmap > ]
'''

[[plugins]]
repo = 'deton/jasentence.vim'
hook_add = '''
  " based on https://qiita.com/murashitas/items/f2be0dda2a4498cb7985
  let g:jasentence_endpat = '[„ÄÇÔºéÔºüÔºÅ]\+'
'''

[[plugins]]
repo = 'deton/jasegment.vim'
hook_add = '''
  " if MeCab exists, change model default to mecab
  " normal check
  if executable('mecab')
    let g:jasegment#model = 'mecab'
    if executable('cabocha')
      let g:jasegment#model = 'cabocha'
    endif
  endif

  " if need?
  let is_windows = has('win32') || has('win64') " later as historical ==|| has('win16') || has('win95')==
  if is_windows
    " 32bit check
    " let g:jasegment#cabocha#cmd = '"C:/Program Files/CaboCha/bin/cabocha.exe"'
    " let g:jasegment#mecab#cmd = '"C:/Program Files/MeCab/bin/mecab.exe"'
  endif

  let g:jasegment#highlight = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
hook_add = '''
  " J „ÅÆÊåôÂãï„Çí jplus.vim „ÅßË°å„ÅÜ
  nmap J <Plug>(jplus)
  vmap J <Plug>(jplus)

  " getchar() „Çí‰ΩøÁî®„Åó„Å¶ÊåøÂÖ•ÊñáÂ≠ó„ÇíÂÖ•Âäõ„Åó„Åæ„Åô
  nmap <Leader>J <Plug>(jplus-getchar)
  vmap <Leader>J <Plug>(jplus-getchar)

  " input„ÅßË§áÊï∞
  nmap <Leader>gJ <Plug>(jplus-input)
  vmap <Leader>gJ <Plug>(jplus-input)

  " let g:jplus#config = {}

  let g:jplus#input_config = {
        \ '__DEFAULT__' : {
        \  'delimiter_format' : '%d ',
        \ },
        \ '__EMPTY__'   : {
        \  'delimiter'        : ' ',
        \  'delimiter_format' : '%d',
        \ },
        \ '+' : {
        \  'delimiter_format' : ' %d '
        \ },
        \ '.' : {
        \  'delimiter_format' : '%d'
        \ },
        \ '_' : {
        \  'delimiter_format' : '%d'
        \ },
        \ '->' : {
        \  'delimiter_format' : '%d'
        \ },
        \}
'''

[[plugins]]
repo = 'ahonn/vim-fileheader'
hook_add = '''
  " let g:fileheader_auto_add = 0    " Default value: 0
  " let g:fileheader_auto_update = 1 " Default value: 1

  " let g:fileheader_by_git_config = 1 " Default value: 1
  " off
  let g:fileheader_author   = "Tsuyoshi CHO"
  " let g:fileheader_email    = "Tsuoshi.CHO@Gmail.com"

  let c_style = { 'begin': '/**', 'char': ' * ', 'end': ' */' }
  let g:fileheader_delimiter_map = {
        \ 'c'    : c_style,
        \ 'cpp'  : c_style,
        \ 'java' : c_style,
        \}
'''

[[plugins]]
repo = 'alpertuna/vim-header'
depends = ['vim-fileheader'] # use setting
hook_add = '''
  let g:header_auto_add_header = 0
  let g:header_alignment = 0
  let g:header_max_size = 10

  let g:header_field_filename = 1
  " let g:header_field_filename_path = 0

  " set as default
  let g:header_field_author = "Tsuyoshi CHO"
  let g:header_field_author_email = "Tsuoshi.CHO@Gmail.com"

  " let g:header_field_copyright = ''
  " let g:header_field_timestamp = 1
  " let g:header_field_modified_timestamp = 1
  " let g:header_field_modified_by = 1

  " let g:header_field_timestamp_format = '...'

  " let g:header_field_license_id = ''

  " let g:header_cfg_comment_char = '#'

  function! s:header_lazy_setup() abort
    " setting transfer from vim-fileheader
    let g:header_field_author           = g:fileheader_author
    let g:header_field_author_email     = g:fileheader_email
    let g:header_field_timestamp_format = g:fileheader_date_format
  endfunction
  command! HeaderLazySetup call <SID>header_lazy_setup()
  " currently use vim-fileheader's AddFileHeader/UpdateFileHeader
  " and vim-header only use license function
'''

[[plugins]]
# repo = 'syngan/vim-clurin'
repo = 'uplus/vim-clurin'
depends = ['vim-speeddating']
hook_add = '''
  " original syngan use_default define top(all lang)
  " modified uplus  use_default define per-lang

  " see https://bitbucket.org/hokorobi/vimfiles_pub/src
  " see https://github.com/syngan/vim-clurin
  function! g:CtrlAX(cnt) abort
    " normal op
    " if a:cnt >= 0
    "     execute 'normal!' a:cnt . "\<C-A>"
    " else
    "     execute 'normal!' (-a:cnt) . "\<C-X>"
    " endif

    " " speeddaging
    " call speeddating#increment(a:cnt)

    " hokorobi san model
    if a:cnt < 0
      call speeddating#increment(-v:count1)
    else
      call speeddating#increment(v:count1)
    endif
  endfunction

  let g:clurin = {
        \ '-': {
        \   'use_default': 0,
        \   'nomatch': function('g:CtrlAX'),
        \   'def': [
        \      ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        \      ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        \      ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        \      ['true', 'false'],
        \      ['True', 'False'],
        \      ['TRUE', 'FALSE'],
        \      ['on', 'off'],
        \      ['On', 'Off'],
        \      ['ON', 'OFF'],
        \      ['yes', 'no'],
        \      ['Yes', 'No'],
        \      ['YES', 'NO'],
        \      ['enable', 'disable'],
        \      ['Enable', 'Disable'],
        \      ['ENABLE', 'DISABLE'],
        \      ['left', 'right'],
        \      ['=', ' = '],
        \      ['+', ' + '],
        \      ['-', ' - '],
        \      ['*', ' * '],
        \      ['/', ' / '],
        \      ['%', ' % '],
        \      ['‚ñ°', '‚ñ†', '‚òëÔ∏è', '‚òí'] ,
        \      ['‚òÜ', '‚òÖ'] ,
        \      [
        \        {'pattern': 'Êúà\(\%[ÊõúÊó•]\)', 'replace': 'Êúà\1'},
        \        {'pattern': 'ÁÅ´\(\%[ÊõúÊó•]\)', 'replace': 'ÁÅ´\1'},
        \        {'pattern': 'Ê∞¥\(\%[ÊõúÊó•]\)', 'replace': 'Ê∞¥\1'},
        \        {'pattern': 'Êú®\(\%[ÊõúÊó•]\)', 'replace': 'Êú®\1'},
        \        {'pattern': 'Èáë\(\%[ÊõúÊó•]\)', 'replace': 'Èáë\1'},
        \        {'pattern': 'Âúü\(\%[ÊõúÊó•]\)', 'replace': 'Âúü\1'},
        \        {'pattern': 'Êó•\(\%[ÊõúÊó•]\)', 'replace': 'Êó•\1'},
        \      ],
        \   ]
        \ },
        \ 'toml vim': {
        \   'def': [
        \      [
        \        {'pattern': '"' . '\([^"]*\)'  . '"' , 'replace': '"' . '\1' . '"'},
        \        {'pattern': "'" . '\([^'']*\)' . "'" , 'replace': "'" . '\1' . "'"},
        \      ]
        \   ]
        \ },
        \ 'vim': {
        \   'def': [
        \      [
        \        {'pattern': '\[''\(\k\+\)''\]', 'replace': '[''\1'']'},
        \        {'pattern': '\["\(\k\+\)"\]'  , 'replace': '["\1"]'},
        \        {'pattern': '\.\(\k\+\)'      , 'replace': '.\1'},
        \      ]
        \   ]
        \ },
        \ 'markdown': {
        \   'def': [
        \      ['[ ]', '[x]'],
        \   ]
        \ },
        \ 'gitrebase': {
        \   'def': [
        \      ['pick', 'fixup', 'reword', 'edit', 'squash', 'drop', 'exec'],
        \   ]
        \ },
        \ 'c cpp' : {
        \   'def': [
        \     [ '&&', '||' ],
        \     [
        \       {'pattern': '\(\k\+\)\.', 'replace': '\1.'},
        \       {'pattern': '\(\k\+\)->', 'replace': '\1->'},
        \     ]
        \   ]
        \ }
        \}
'''
hook_post_source = '''
  nmap + <Plug>(clurin-next)
  nmap - <Plug>(clurin-prev)
  vmap + <Plug>(clurin-next)
  vmap - <Plug>(clurin-prev)
'''

[[plugins]]
repo = 'kamykn/spelunker.vim'
# repo = 'tsuyoshicho/spelunker.vim'
# rev  = 'feature/ctrlp'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  " ctrlp ext
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['spelunker']

  " Enable spelunker.vim. (default: 1)
  " 1: enable
  " 0: disable
  " let g:enable_spelunker_vim = 1

  " Enable spelunker.vim on readonly files or buffer. (default: 0)
  " 1: enable
  " 0: disable
  " let g:enable_spelunker_vim_on_readonly = 0

  " Check spelling for words longer than set characters. (default: 4)
  " let g:spelunker_target_min_char_len = 4

  " Max amount of word suggestions. (default: 15)
  let g:spelunker_max_suggest_words = min([(&lines/4), 10])
  autocmd MyAutoGroup VimResized * let g:spelunker_max_suggest_words = min([(&lines/4), 10])

  " Max amount of highlighted words in buffer. (default: 100)
  " let g:spelunker_max_hi_words_each_buf = 100

  " Spellcheck type: (default: 1)
  " 1: File is checked for spelling mistakes when opening and saving. This
  " may take a bit of time on large files.
  " 2: Spellcheck displayed words in buffer. Fast and dynamic. The waiting time
  " depends on the setting of CursorHold `set updatetime=1000`.
  let g:spelunker_check_type = 2

  " Highlight type: (default: 1)
  " 1: Highlight all types (SpellBad, SpellCap, SpellRare, SpellLocal).
  " 2: Highlight only SpellBad.
  " FYI: https://vim-jp.org/vimdoc-en/spell.html#spell-quickstart
  " let g:spelunker_highlight_type = 1

  " Disable default autogroup. (default: 0)
  " let g:spelunker_disable_auto_group = 1

  " Create own custom autogroup to enable spelunker.vim for specific filetypes.

  " autocmd MyAutoGroup Filetype startify
  "      \ if g:enable_spelunker_vim  | call spelunker#toggle() | endif

  " Override highlight group name of incorrectly spelled words. (default:
  " 'SpelunkerSpellBad')
  " let g:spelunker_spell_bad_group = 'SpelunkerSpellBad'

  " Override highlight group name of complex or compound words. (default:
  " 'SpelunkerComplexOrCompoundWord')
  " let g:spelunker_complex_or_compound_word_group = 'SpelunkerComplexOrCompoundWord'

  " skip word
  let g:spelunker_white_list_for_user = ['tsuyoshi_cho']
'''
hook_post_source = '''
  set nospell
  set complete-=kspell

  " jump keymap
  silent! nmap <unique> ]s <Plug>(spelunker-jump-next)
  silent! nmap <unique> [s <Plug>(spelunker-jump-prev)
'''

[[plugins]] # codic support
repo = 'koron/codic-vim'

[[plugins]] # codic support
repo = 'tsuyoshicho/codic-web.vim'
rev  = 'develop'
depends = ['vim-pass']
hook_add = '''
  " let g:codicweb_token = '<token>'
  call pass#get_startup('g:codicweb_token','Develop/Codic')
'''

[[plugins]]
repo = 'tpope/vim-speeddating'
depends = ['vim-repeat']
hook_add = '''
  " let g:speeddating_no_mappings = 1 " if conflict

  " support windows
  let is_windows = has('win32') || has('win64') " later as historical ==|| has('win16') || has('win95')==

  " remove windows setting
  if is_windows
    silent! vunmap <C-X>
  endif
'''
hook_post_source = '''
  " nmap  <C-A> <Plug>SpeedDatingUp
  " nmap  <C-X> <Plug>SpeedDatingDown
  " xmap  <C-A> <Plug>SpeedDatingUp
  " xmap  <C-X> <Plug>SpeedDatingDown
  " nmap d<C-A> <Plug>SpeedDatingNowUTC
  " nmap d<C-X> <Plug>SpeedDatingNowLocal

  " format add
  SpeedDatingFormat %Y%[/-]%-m%1%-d %_H:%M       " 2000/1/1 10:15
  SpeedDatingFormat %Y%[/-]%-m%1%-d              " 2000/1/1
  SpeedDatingFormat %H:%0M                       " 10:15
  SpeedDatingFormat %YÂπ¥%-mÊúà%-dÊó•%?[ ]%_HÊôÇ%MÂàÜ " 2000Âπ¥1Êúà1Êó• 12ÊôÇ1ÂàÜ
  SpeedDatingFormat %YÂπ¥%-mÊúà%-dÊó•               " 2000Âπ¥1Êúà1Êó•
  " SpeedDatingFormat %-mÊúà%-dÊó•%?[ ](%a)         " 1Êúà1Êó• (Êúà)
  SpeedDatingFormat %-mÊúà%-dÊó•                   " 1Êúà1Êó•
  SpeedDatingFormat %HÊôÇ%0MÂàÜ%SÁßí                " 12ÊôÇ1ÂàÜ30Áßí
  SpeedDatingFormat %HÊôÇ%MÂàÜ                     " 12ÊôÇ1ÂàÜ
  SpeedDatingFormat %MÂàÜ%SÁßí                     " 1ÂàÜ30Áßí
'''

[[plugins]] # https://pixe.la/
repo = 'mattn/vim-pixela'
# on_if= 'executable("curl")' # check inner and load at start needed
depends = ['open-browser.vim','vim-pass']
hook_add = '''
  " let g:pixela_username = 'tsuyoshicho'
  " let g:pixela_token    = '<token>'

  call pass#get_startup('g:pixela_username','Develop/Pixela','username')
  call pass#get_startup('g:pixela_token','Develop/Pixela')
'''

## textobj & operator
# textobj
# see http://d.hatena.ne.jp/osyo-manga/20130717/1374069987
# support tool
[[plugins]]
repo = 'terryma/vim-expand-region'
hook_post_source = '''
  vmap v     <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)
'''

# textobj „ÅÆ„Éô„Éº„Çπ
[[plugins]]
repo = 'kana/vim-textobj-user'

# special

# vim-sandwitch„Çí‰Ωø„ÅÜ
# # ‰ªªÊÑè„ÅÆÂå∫Âàá„ÇäÊñáÂ≠ó
# # af, if (Á∂ö„Åë„Å¶Âå∫Âàá„ÇäÊñáÂ≠ó„ÇíÂÖ•Âäõ)
# [[plugins]]
# repo = 'thinca/vim-textobj-between'
# depends = ['vim-textobj-user']

# Ë§áÊï∞„ÅÆ„Ç´„ÉÉ„Ç≥„ÅßÂá¶ÁêÜ„ÇíÂÆüÊñΩ„Åó„ÄÅ„Éû„ÉÉ„ÉÅ„Åó„Åü„ÇÇ„ÅÆor(list„Å™„Çâ)‰∏ÄÁï™ÂÜÖÂÅ¥„Çí‰Ωø„ÅÜ
# amb, imb
[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = ['vim-textobj-user']
hook_add = '''
  " see https://github.com/rinx/dotfiles/blob/master/vimrc
  " tex
  function s:multiblock_hook_add_tex()
    let b:textobj_multiblock_blocks = [
          \ ['\$', '\$', 1],
          \ ['\$\$', '\$\$', 1],
          \ ]
  endfunction

  " markdown
  function s:multiblock_hook_add_markdown()
    let b:textobj_multiblock_blocks = [
          \ ['`', '`', 1],
          \ ['```', '```'],
          \ ]
  endfunction

  " ruby
  function s:multiblock_hook_add_ruby()
    let b:textobj_multiblock_blocks = [
          \ ['/', '/', 1],
          \ ]
  endfunction

  augroup vimrc-init_multiblock_hook_add
    autocmd!
    autocmd FileType tex,latex,plaintex call <SID>multiblock_hook_add_tex()
    autocmd FileType markdown call <SID>multiblock_hook_add_markdown()
    autocmd FileType ruby call <SID>multiblock_hook_add_ruby()
  augroup END
'''
hook_post_source = '''
  omap amb <Plug>(textobj-multiblock-a)
  omap imb <Plug>(textobj-multiblock-i)
  vmap amb <Plug>(textobj-multiblock-a)
  vmap imb <Plug>(textobj-multiblock-i)
'''

# „Ç´„ÉÉ„Ç≥Á≥ª„ÅßË§áÊï∞„ÅÆÂá¶ÁêÜ„ÇíÂÆüÊñΩ„Åó„ÄÅ„Éû„ÉÉ„ÉÅ„Åó„Åü„ÇÇ„ÅÆor(list„Å™„Çâ)‰∏ÄÁï™ÂÜÖÂÅ¥„Çí‰Ωø„ÅÜ
# amt, imt
[[plugins]]
repo = 'osyo-manga/vim-textobj-multitextobj'
depends = ['vim-textobj-user', 'vim-textobj-url', 'vim-sandwich', 'vim-textobj-multiblock', 'vim-textobj-function', 'vim-textobj-jabraces']
hook_add = '''
  " URL,datetime,paren,function,space,wiw,indent
  " paren replace vim-sandwich autofunction
  let g:textobj_multitextobj_textobjects_i = [
        \   '<Plug>(textobj-url-i)',
        \   '<Plug>(textobj-sandwich-auto-i)',
        \   '<Plug>(textobj-multiblock-i)',
        \   '<Plug>(textobj-function-i)',
        \]

  let g:textobj_multitextobj_textobjects_a = [
        \   '<Plug>(textobj-url-a)',
        \   '<Plug>(textobj-sandwich-auto-a)',
        \   '<Plug>(textobj-multiblock-i)',
        \   '<Plug>(textobj-function-a)',
        \]

  " jabraces
  " ÔºàÔºâ    <Plug>(textobj-jabraces-parens-i)
  " ÔºªÔºΩ    <Plug>(textobj-jabraces-braces-i)
  " ÔΩõÔΩù    <Plug>(textobj-jabraces-brackets-i)
  " ÔºúÔºû    <Plug>(textobj-jabraces-angles-i)
  " ‚â™‚â´    <Plug>(textobj-jabraces-double-angles-i)
  " „Äå„Äç    <Plug>(textobj-jabraces-kakko-i)
  " „Äé„Äè    <Plug>(textobj-jabraces-double-kakko-i)
  " „Äà„Äâ    <Plug>(textobj-jabraces-yama-kakko-i)
  " „Ää„Äã    <Plug>(textobj-jabraces-double-yama-kakko-i)
  " „Äî„Äï    <Plug>(textobj-jabraces-kikkou-kakko-i)
  " „Äê„Äë    <Plug>(textobj-jabraces-sumi-kakko-i)
  let g:textobj_multitextobj_textobjects_group_i = {}
  let g:textobj_multitextobj_textobjects_group_i.A = [
        \ '<Plug>(textobj-jabraces-kakko-i)',
        \ '<Plug>(textobj-jabraces-double-kakko-i)',
        \ '<Plug>(textobj-jabraces-double-yama-kakko-i)',
        \ '<Plug>(textobj-jabraces-sumi-kakko-i)',
        \ '<Plug>(textobj-jabraces-double-angles-i)',
        \ '<Plug>(textobj-jabraces-parens-i)',
        \ '<Plug>(textobj-jabraces-braces-i)',
        \ '<Plug>(textobj-jabraces-brackets-i)',
        \ ]
  let g:textobj_multitextobj_textobjects_group_a = {}
  let g:textobj_multitextobj_textobjects_group_a.A = [
        \ '<Plug>(textobj-jabraces-kakko-a)',
        \ '<Plug>(textobj-jabraces-double-kakko-a)',
        \ '<Plug>(textobj-jabraces-double-yama-kakko-a)',
        \ '<Plug>(textobj-jabraces-sumi-kakko-a)',
        \ '<Plug>(textobj-jabraces-double-angles-a)',
        \ '<Plug>(textobj-jabraces-parens-a)',
        \ '<Plug>(textobj-jabraces-braces-a)',
        \ '<Plug>(textobj-jabraces-brackets-a)',
        \ ]
  map <Plug>(textobj-multitextobj-jabraces-i) <Plug>(textobj-multitextobj-A-i)
  map <Plug>(textobj-multitextobj-jabraces-a) <Plug>(textobj-multitextobj-A-a)
'''
hook_post_source = '''
  omap imt <Plug>(textobj-multitextobj-i)
  omap amt <Plug>(textobj-multitextobj-a)
  vmap imt <Plug>(textobj-multitextobj-i)
  vmap amt <Plug>(textobj-multitextobj-a)

  omap amj <Plug>(textobj-multitextobj-jabraces-a)
  omap imj <Plug>(textobj-multitextobj-jabraces-i)
  vmap amj <Plug>(textobj-multitextobj-jabraces-a)
  vmap imj <Plug>(textobj-multitextobj-jabraces-i)
'''

# Êó•‰ªò„Å®ÊôÇÂàª
# ada, ida (auto)
[[plugins]]
repo = 'kana/vim-textobj-datetime'
depends = ['vim-textobj-user']

# ÈÄ£Á∂ö„Åó„Åü„Çπ„Éö„Éº„Çπ
# aS, iS
[[plugins]]
repo = 'saihoooooooo/vim-textobj-space'
depends = ['vim-textobj-user']

# Êó•Êú¨Ë™ûÊã¨Âºß
# „Éá„Éï„Ç©„É´„Éàoff
[[plugins]]
repo = 'kana/vim-textobj-jabraces'
hook_add = '''
  let g:textobj_jabraces_no_default_key_mappings = 1
'''

# Èñ¢Êï∞ÂÜÖ
# af, if
# # af, if -> aF, iF„Å´„Éû„ÉÉ„Éó (between„Å®„Éê„ÉÉ„ÉÜ„Ç£„É≥„Ç∞)
# # aF, iF„ÅØ‰Ωø„Çè„Å™„ÅÑ
[[plugins]]
repo = 'kana/vim-textobj-function'
depends = ['vim-textobj-user']
hook_add = '''
  " let g:textobj_function_no_default_key_mappings = 1
'''
hook_post_source = '''
  " omap iF <Plug>(textobj-function-i)
  " omap aF <Plug>(textobj-function-a)
  " vmap iF <Plug>(textobj-function-i)
  " vmap aF <Plug>(textobj-function-a)
'''

# Èñ¢Êï∞ÂÜÖ
# syntax„ÇíÂà©Áî®„Åô„Çã function Êã°Âºµ
[[plugins]]
repo = 'haya14busa/vim-textobj-function-syntax'
depends = ['vim-textobj-function']

# „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„Å®Âêå„Åò„Ç§„É≥„Éá„É≥„Éà
# ai, ii / aI, iI
[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = ['vim-textobj-user']

# URLÈÅ∏Êäû
# au, iu
[[plugins]]
repo = 'mattn/vim-textobj-url'
depends = ['vim-textobj-user']

# Ë®ÄË™ûÂà•
# C/C++
# a;, i;
# [[plugins]]
# repo = 'libclang-vim/vim-textobj-clang'
# depends = ['vim-textobj-user', 'libclang-vim']
# hook_add = '''
#   " let g:textobj_clang_more_mappings = 1
#   " more setting and off a;
# '''

# multi„Å´ÂÖ•„Çå„Å™„ÅÑÁ≥ª
# word „ÅÆ‰∏≠„ÅÆÂçòË™û„ÇíÈÅ∏Êäû
# a<prefix>w, i<prefix>w
# prefix = ,w ÁßªÂãïÊ©üËÉΩ„ÇÇ„ÅÇ„Çã
[[plugins]]
repo = 'h1mesuke/textobj-wiw'
depends = ['vim-textobj-user']
hook_add = '''
  let g:textobj_wiw_default_key_mappings_prefix = ',w'
'''

# contextÂÜÖ
# icx
# at vim-precious

# „Éñ„É≠„ÉÉ„ÇØÂÜÖ/paren„Åî„Å®
# a%, i%
# at vim-matchup

# swapÂèØËÉΩ„Å™„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà(ÂºïÊï∞„ÇÑÈÖçÂàó„É°„É≥„Éê„Å™„Å©„ÅÆ,Âå∫Âàá„Çä„Éá„Éº„Çø)
# a,, i,,
# at vim-swap

# operator
# see https://qiita.com/rbtnn/items/a47ed6684f1f0bc52906
# ToDo Keymap list up and setup
[[plugins]]
repo = 'kana/vim-operator-user'

# ÈÄ£Áï™‰ªò‰∏é
# operator:viw„Å™„Å© ÈÅ∏ÊäûÁä∂ÊÖã„Å´„Åó„Å¶zS(normal)/zP(prev)„ÅßÂá¶ÁêÜ
# 'deris/vim-rengbang'

# operator:viw„Å™„Å© ÈÅ∏ÊäûÁä∂ÊÖã„Å´„Åó„Å¶sa/sd/sr+<char>„ÅßÂá¶ÁêÜ
# textobj :as, is (Ëá™Âãï)/ ab, ib (Á∂ö„Åë„Å¶Âå∫Âàá„ÇäÊñáÂ≠ó„ÇíÂÖ•Âäõ)
[[plugins]]
repo = 'machakann/vim-sandwich'
hook_add = '''
  let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
  let g:sandwich#recipes += [
        \ {
        \   'buns': ['\(', '\)'],
        \   'filetype': ['vim'],
        \   'nesting': 1,
        \ },
        \ {
        \   'buns': ['\%(', '\)'],
        \   'filetype': ['vim'],
        \   'nesting': 1,
        \ },
        \ {
        \   'buns': ['\<', '\>'],
        \   'filetype': ['vim'],
        \   'nesting': 0,
        \ },
        \ {
        \   'buns': ['`', '`'],
        \   'filetype': ['markdown'],
        \   'nesting': 0,
        \ },
        \ {'buns' : ['„Äå', '„Äç']},
        \ {'buns' : ['„Äê', '„Äë']},
        \ {'buns' : ['Ôºà', 'Ôºâ']},
        \ {'buns' : ['„Äé', '„Äè']},
        \]

  let g:sandwich#magicchar#f#patterns = deepcopy(g:sandwich#magicchar#f#default_patterns)
  let g:sandwich#magicchar#f#patterns += [
        \ {
        \   'header' : '\<\h\k*', 'footer' : '',
        \   'bra'    : '(',       'ket'    : ')',
        \ },
        \]
'''

# viw„Å™„Å© ÈÅ∏ÊäûÁä∂ÊÖã„Å´„Åó„Å¶zr„ÅßÂá¶ÁêÜ yank„Å®ÂÖ•„ÇåÊõø„Åà
[[plugins]]  # yank replace operator
repo = 'kana/vim-operator-replace'
depends = ['vim-operator-user']
hook_add = '''
  map zr <Plug>(operator-replace)
'''

[[plugins]] # yank replace operator
repo = 'svermeulen/vim-subversive'
depends = ['vim-yoink']
# current not configured

# viw„Å™„Å© ÈÅ∏ÊäûÁä∂ÊÖã„Å´„Åó„Å¶zs„ÅßÂá¶ÁêÜ
[[plugins]]
repo = 'emonkak/vim-operator-sort'
depends = ['vim-operator-user']
hook_add = '''
  map zs <Plug>(operator-sort)
'''

# viw„Å™„Å© ÈÅ∏ÊäûÁä∂ÊÖã„Å´„Åó„Å¶zu/zU„ÅßÂá¶ÁêÜ / ÂΩìÂ∫ß„ÅØciw„Åß
[[plugins]]
repo = 'emonkak/vim-operator-comment'
depends = ['vim-operator-user']
hook_add = '''
  map zu <Plug>(operator-comment)
  map zU <Plug>(operator-uncomment)
'''

# viw„Å™„Å© ÈÅ∏ÊäûÁä∂ÊÖã„Å´„Åó„Å¶zc/zC„ÅßÂá¶ÁêÜ
[[plugins]]
repo = 'mopp/vim-operator-convert-case'
depends = ['vim-operator-user']
hook_add = '''
  map zc <Plug>(operator-convert-case-loop)
  map zC <Plug>(operator-convert-case-convert)
'''

# viw„Å™„Å© ÈÅ∏ÊäûÁä∂ÊÖã„Å´„Åó„Å¶zt/zl„ÅßÊ§úÁ¥¢
[[plugins]]
repo = 'tyru/operator-reverse.vim'
depends = ['vim-operator-user']
hook_add = '''
  map zt <Plug>(operator-reverse-text)
  map zl <Plug>(operator-reverse-lines)
'''

# # viw„Å™„Å© ÈÅ∏ÊäûÁä∂ÊÖã„Å´„Åó„Å¶z*/zg*/zg#/z#„ÅßÊ§úÁ¥¢
#  visualstar „Çí asterisk „Å´Â§â„Åà„Åü„ÅÆ„Åßoff
# [[plugins]]
# repo = 'tyru/operator-star.vim'
# depends = ['vim-operator-user','visualstar']
# hook_add = '''
#   map z*  <Plug>(operator-*)
#   map zg* <Plug>(operator-g*)
#   map z#  <Plug>(operator-#)
#   map zg# <Plug>(operator-g#)
# '''

# Startup
# [[plugins]]
# repo = 'thinca/vim-splash'
# hook_add = '''
#   " let g:splash#path = ''
# '''

[[plugins]]
repo = 'mhinz/vim-startify'
depends = ['vital.vim']
hook_post_source = '''
  let Filepath = g:V.import('System.Filepath')
  let List     = g:V.import('Data.List')
  let String   = g:V.import('Data.String')

  let g:startify_padding_left=3
  let l:padding = repeat(" ", g:startify_padding_left)

  let g:startify_lists = [
        \ { 'type': 'files',     'header': [l:padding . 'MRU']            },
        \ { 'type': 'dir',       'header': [l:padding . 'MRU '. getcwd()] },
        \ { 'type': 'commands',  'header': [l:padding . 'Commands']       },
        \ { 'type': 'sessions',  'header': [l:padding . 'Sessions']       },
        \ { 'type': 'bookmarks', 'header': [l:padding . 'Bookmarks']      },
        \]

  let g:startify_files_number = 15

  let g:startify_bookmarks = [
        \ {'z': '~/.gvimrc'},
        \ {'x': '~/.vimrc'},
        \ {'c': '~/.vim/rc/colorscheme.toml'},
        \ {'d': '~/.vim/rc/dein.toml'},
        \ {'v': '~/.vim/rc/dein_lazy.toml'},
        \ {'b': '~/.bashrc'},
        \]

  " no need depend : write as text (if no-exist , no work)
  let g:startify_commands = [
        \ {'h': ':help help'},
        \ {'r': ['Restart', 'Restart']},
        \ {'u': ['Plugin update', 'Dein update']},
        \ {'l': ['CtrlP Launcher', 'CtrlPLauncher']},
        \ {'L': ['Clap Launcher', 'Clap launcher']},
        \ {'t': ['Twitter', 'FriendsTwitter']},
        \ {'m': ['Mastodon', 'Mastodon timeline']},
        \ {'o': ['Qiita', 'Qiita -l']},
        \ {'i': ['Calendar', 'Calendar -split=vertical -position=right']},
        \]

  " let g:startify_disable_at_vimenter=0
  " This value as default
  if has('win32unix')
    " MSYS vim (git for windows) very slowly : reason startify syntax too long
    let g:startify_disable_at_vimenter=1
  endif

  " ignore server name
  " let g:startify_skiplist_server = [ 'GVIM' ]

  " ignore MRU file
  " Git and other special files
  let specialskiplist = [
        \  Filepath.separator() . '.git' . Filepath.separator(),
        \ 'fugitiveblame$',
        \]

  " Vim help files
  " position
  let deinpath = fnamemodify(Filepath.realpath(
        \    g:dein.dir.plugins . Filepath.separator() .
        \    '.cache' . Filepath.separator() .
        \    '.vimrc' . Filepath.separator() .
        \    '.dein'
        \  ), ":p:~")
  let deinrelpath = String.replace_first(deinpath, '~' . Filepath.separator(), '')

  let position = [
        \  Filepath.abspath(resolve($VIMRUNTIME)) . Filepath.separator(),
        \ 'runtime'                               . Filepath.separator(),
        \ 'bundle'  . Filepath.separator() . '.*' . Filepath.separator(),
        \ 'plugged' . Filepath.separator() . '.*' . Filepath.separator(),
        \ deinrelpath,
        \]
  let helpfiles = ['.*\.txt', '.*\.jax']

  let helpskiplist = []
  for helpfile in helpfiles
    let helpskiplist = List.concat([helpskiplist, List.map(position,
          \ { v ->  escape(v . 'doc' . Filepath.separator(), '\') . helpfile })])
  endfor

  let g:startify_skiplist = List.concat([get(g:, 'startify_skiplist',[]), specialskiplist, helpskiplist])

  " let g:startify_fortune_use_unicode=1
  " autocmd MyAutoGroup User Startified setlocal ambiwidth=single
  " oops: open mru and other keep ambiwidth...
  let g:startify_files_number = 12

  let l:logo = [
        \ '___    ______________  ___',
        \ '__ |  / /___  _/__   |/  /',
        \ '__ | / / __  / __  /|_/ /',
        \ '__ |/ / __/ /  _  /  / /',
        \ '_____/  /___/  /_/  /_/',
        \]

  let l:datetime = ['*** '.strftime("%Y/%m/%d(%a)", localtime()).' ***']
  let g:startify_custom_header =
        \ map(l:logo + startify#fortune#boxed() + l:datetime, 'l:padding . v:val')
  " space same as padding_left

  let l:vimver = ['vim version:', ' ' . 'short:' . string(v:version)]
  if exists('v:versionlong')
    call add(l:vimver, ' ' . 'long :' . string(v:versionlong))
  endif
  let g:startify_custom_footer =
        \ map(l:vimver, 'l:padding . v:val')

  unlet l:logo
  unlet l:datetime
  unlet l:padding

  let g:startify_update_oldfiles = 1
  " oldfile refine unix/win path style
  call map(v:oldfiles, 'Filepath.realpath(v:val)')
  call map(v:oldfiles, 'fnamemodify(v:val, ":p:~")')
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_vert_resize = 1
  let g:winresizer_horiz_resize = 1
'''

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
  " use overlay feature
  let g:choosewin_overlay_enable = 1

  " workaround for the overlay font being broken on mutibyte buffer.
  " let g:choosewin_overlay_clear_multibyte = 1
'''
hook_post_source = '''
  " invoke with '-' : original
  " key bind to ',-'
  nmap  <Leader>-  <Plug>(choosewin)
'''

[[plugins]]
repo = 'justincampbell/vim-eighties'
hook_add = '''
  let g:eighties_enabled = 1
  let g:eighties_minimum_width = min([(&columns * 2 / 3), 60])
  autocmd MyAutoGroup VimResized * let g:eighties_minimum_width = min([(&columns * 2 / 3), 60])
  let g:eighties_extra_width = 10 " Increase this if you want some extra room
  let g:eighties_compute = 1 " Disable this if you just want the minimum + extra
  let g:eighties_bufname_additional_patterns = [] " Defaults to [], 'fugitiveblame' is only an example. Takes a comma delimited list of bufnames as strings.
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  let g:netrw_nogx = 1 " disable netrw's gx mapping.
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'tyru/open-browser-unicode.vim'
depends = ['open-browser.vim']

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = '''
  " let g:calendar_frame = 'default'

  let g:calendar_first_day = "sunday"
  let g:calendar_view = "days"

  let g:calendar_google_calendar = 1
  let g:calendar_google_task = 1

  let g:calendar_updatetime = &updatetime
'''

[[plugins]]
repo = 'thinca/vim-themis'

# based on https://qiita.com/lighttiger2505/items/96d4cda9074f9719bc82
[[plugins]]
repo = 'tpope/vim-dispatch'
hook_add = '''
  let g:dispatch_no_maps = 1
  " need mapping if required
'''

[[plugins]]
repo = 'janko-m/vim-test'
depends = ['vim-dispatch']
hook_add = '''
  let g:test#strategy = 'dispatch'
'''

# Doc & File & Web
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
  " based on http://haya14busa.com/reading-vim-help/
  set helplang& helplang=ja,en
'''

[[plugins]]
repo = 'mattn/learn-vimscript'

# plugin support
[[plugins]]
repo = 'mopp/layoutplugin.vim'
hook_add = '''
  let g:layoutplugin#user_name = 'Tsuyoshi CHO'
  " let g:layoutplugin#is_append_vimrc
  " let g:layoutplugin#is_suffix_readme_md
  let g:layoutplugin#is_suffix_plugin_name = 0
  " When set .vim; manually
'''

[[plugins]]
repo = 'LeafCage/vimhelpgenerator'
hook_add = '''
  let g:vimhelpgenerator_author = 'Author  : Tsuyoshi CHO <Tsuyoshi.CHO+develop@Gmail.com>'
  let g:vimhelpgenerator_uri = 'https://github.com/tsuyoshicho/'
'''

[[plugins]]
repo = 'rhysd/devdocs.vim'
depends = ['open-browser.vim']

[[plugins]]
repo = 'chrisbra/unicode.vim'

[[plugins]] # gf/gF extend
repo = 'wsdjeg/vim-fetch'
# gf-user/gf-diff replace

[[plugins]] # „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„ÅÆft„ÇíÂà§ÂÆö„Åô„Çã„É©„Ç§„Éñ„É©„É™
repo = 'Shougo/context_filetype.vim'
hook_post_source = '''
  let l:default_filetypes = g:context_filetype#default_filetypes()

  let plantuml_context = [
        \  {
        \   'start' : '\_.\%(@startuml\)\@=',
        \   'end' : '\%(@enduml\)\@<=\_.', 'filetype' : 'plantuml'
        \  },
        \  {
        \   'start' : '\_.\%(@startgantt\)\@=',
        \   'end' : '\%(@endgantt\)\@<=\_.', 'filetype' : 'plantuml'
        \  },
        \  {
        \   'start' : '\_.\%(@startditaa\)\@=',
        \   'end' : '\%(@endditaa\)\@<=\_.', 'filetype' : 'plantuml'
        \  },
        \  {
        \   'start' : '\_.\%(@startdot\)\@=',
        \   'end' : '\%(@enddot\)\@<=\_.', 'filetype' : 'plantuml'
        \  },
        \  {
        \   'start' : '\_.\%(@startsalt\)\@=',
        \   'end' : '\%(@endsalt\)\@<=\_.', 'filetype' : 'plantuml'
        \  },
        \  {
        \   'start' : '\_.\%(@startwbs\)\@=',
        \   'end' : '\%(@endwbs\)\@<=\_.', 'filetype' : 'plantuml'
        \  },
        \  {
        \   'start' : '\_.\%(@startmindmap\)\@=',
        \   'end' : '\%(@endmindmap\)\@<=\_.', 'filetype' : 'plantuml'
        \  },
        \ ]

  for key in ['markdown','text']
    if has_key(l:default_filetypes, key)
      let g:context_filetype#filetypes[key] = extend(
            \ plantuml_context,
            \ l:default_filetypes[key]
            \)
    else
      let g:context_filetype#filetypes[key] = plantuml_context
    endif
  endfor

  " same as typename
  let g:context_filetype#same_filetypes =
        \extend(get(g:, 'context_filetype#same_filetypes', {}),
        \ {
        \  'yml' : 'yaml',
        \ }
        \)
'''

[[plugins]] # „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å´Âêà„Çè„Åõ„Å¶ft„ÇíÂàá„ÇäÊõø„Åà„Çã
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim', 'vim-textobj-user']
# and support context textobj

[[plugins]]
repo = 'LeafCage/taillight.vim'
hook_add = '''
  " „Çª„Éü„Ç≥„É≠„É≥Êú´Â∞æ„ÅÆË®ÄË™û„ÇíËøΩÂä†
  " JavaScript„ÅØÈô§Â§ñ(ÊâãÂãï„Åß)
  " autocmd MyAutoGroup FileType c,cpp,java    TailLight ; /\* \*/
'''

[[plugins]]
# repo = 'yegappan/grep'
repo = 'tsuyoshicho/grep'
rev  = 'develop'
hook_add = '''
  let is_windows = has('win32') || has('win64') " later as historical ==|| has('win16') || has('win95')==

  " command
  " ÁèæÁä∂Windows/system„ÇíPath„ÅÆÂæå„Å´„Åó„Å¶„ÅÑ„Çã„ÅÆ„Åß„ÄÅ„Åù„ÅÆ„Åæ„Åæ‰Ωø„Åà„Çã
  " if is_windows
  "     " WindowsÁí∞Â¢ÉÁî®„ÅÆ„Ç≥„Éº„Éâ
  "
  "     " grep.vimÁî®„Å´Git„ÅÆgrep„Å´„Éë„Çπ„ÇíÈÄö„Åô"
  "     " grep„Ç≥„Éû„É≥„Éâ„Åå„Éë„Çπ‰∏ä„Å´„ÅÇ„Çã„Å™„Çâgit(‰ªñ)„ÅåÊúâÂäπ„Å™„ÅÆ„ÅßË®≠ÂÆö
  "     if executable('grep.exe')
  "       " ÁèæÁä∂Windows/system„ÇíPath„ÅÆÂæå„Å´„Åó„Å¶„ÅÑ„Çã„ÅÆ„Åß„ÄÅfind„ÅÆÈáçË§á„ÅØÂõûÈÅø„Åß„Åç„Çã
  "       let g:Grep_Path = 'grep.exe'
  "       let g:Grep_Xargs_Path = 'xargs.exe'
  "       let g:Grep_Find_Path = 'find.exe'
  "     endif
  " endif

  " grep
  " -I binary as no-match -i ignore case
  let g:Grep_Options   = '-I -i'
  let g:Grep_Skip_Dirs = 'RCS CVS SCCS .svn .git .hg .bzr'
  if is_windows
    " WindowsÁí∞Â¢ÉÁî®„ÅÆ„Ç≥„Éº„Éâ
    " Git for Windows„ÅÆgrep,git grep„ÅØ„Ç®„Çπ„Ç±„Éº„Éó„ÅåÂøÖË¶Å
    " default is_windows '\'
    " let Grep_Shell_Escape_Char = '\'
  endif
  " ex with ignore/smartcase
  " Grep word *
  " grep -s -n -I -i -- 'word' * NUL
  " work fine?

  "ag --help | less ag
  " -S --smart-case         Match case insensitively unless PATTERN contains uppercase characters (Enabled by default)" ex with ignore/smartcase
  " Ag word
  " ag --vimgrep -S 'word'
  " no work / cli same as work
  " -> my repo/develop fix
  let g:Ag_Options     = '-S'

  " pt
  " pt impl is go , - and / work ok
  " /e                        Parse PATTERN as a regular expression (default: false).
  " /S, /smart-case           Match case insensitively unless PATTERN contains uppercase characters" ex with ignore/smartcase
  "     /column               Print column (default: false)
  "     /numbers              Print Line number. (default: true)
  " Ptgrep word
  " pt --nocolor --nogroup -S 'word'
  " no work / cli same as work
  " -> my repo/develop fix
  let g:Pt_Options     = '-e -S --column'

  " findstr
  if is_windows
    " WindowsÁí∞Â¢ÉÁî®„ÅÆ„Ç≥„Éº„Éâ
    " /I ignore case
    let g:Findstr_Options = '/I'
    " ex with ignore/smartcase
    " Findstr word *
    " findstr.exe /N /I 'word' *
    " no work / cli same as work
  " -> my repo/develop fix
  endif

  " git grep
  " -i ignore case
  let g:Gitgrep_Options = '-i'
  " ex with ignore/smartcase
  " Gitgrep word
  " git grep --no-color -n -i -e 'word'
  " no work / cli same as work
  " -> my repo/develop fix
  " Ggrep work fine

  " ripgrep
  " -S, --smart-case Searches case insensitively if the pattern is all lowercase. Search case sensitively otherwise.
  "     --crlf       When enabled, ripgrep will treat CRLF ('\r\n') as a line terminator instead of just '\n'.
  " ex with ignore/smartcase
  " Rg word
  " rg --vimgrep -S -e 'word'
  " no work / cli same as work
  " -> my repo/develop fix
  " if *.ext error occur
  let g:Rg_Options         = '-S'
  if is_windows
    let g:Rg_Options       = g:Rg_Options . ' --crlf'
  endif

  " sift
  " -s, --smart-case                           case insensitive unless pattern
  "     --git                                  respect .gitignore files and skip .git directories
  " -r, --recursive                            recurse into directories
  " ex with ignore/smartcase
  " Sift word *
  " sift --no-color -n --filename --binary-skip -s -e 'word' *
  " no work / cli same as work
  " -> my repo/develop fix
  " .git no skipped (need opt)
  " error msg:  Error: 110 files skipped due to very long lines (>= 262144 bytes). See options --blocksize, --err-show-line-length and --err-skip-line-length.
  let g:Sift_Options      = '-s --git -r --err-skip-line-length'
'''
hook_post_source = '''
  " current support grep method call
  if executable('jvgrep')
    " use 'grepprg'
    nnoremap <expr> <Leader>mg ':grep ' . expand('<cword>') . ' *'
  elseif executable('pt')
    nnoremap <silent> <Leader>mg :Ptgrep<CR>
  elseif executable('ag')
    nnoremap <silent> <Leader>mg :Ag<CR>
  endif

  " usable define
  nnoremap <silent> <Leader>mp :Ptgrep<CR>
  nnoremap <silent> <Leader>ma :Ag<CR>
  " silent „ÅØ„Å™„Åè„Å¶„ÇÇÂπ≥Ê∞ó„Åù„ÅÜ?
'''

# autocomplete
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = ['async.vim']
hook_add = '''
  let g:lsp_async_completion = 1

  let g:lsp_auto_enable = 1          " default 1
  let g:lsp_diagnostics_enabled = 1  " default 1
  " textprop or float enable default 1
  let g:lsp_signs_enabled = 1           " default 1 enable signs
  let g:lsp_diagnostics_echo_cursor = 1 " default 0 enable echo under cursor when in normal mode

  " icon setting
  " use vim-lsp-icons plugin
  " let g:lsp_signs_error       = {'text': 'üî•'}
  " let g:lsp_signs_warning     = {'text': '‚ùó'}
  " let g:lsp_signs_information = {'text': 'üëÅÔ∏è'}

  " server setup
  " mainly setting use vim-lsp-settings plugin

  " optional
  let g:lsp_item = []

  " efm server
  " use vim-efm-langserver-settings

  " c/c++ cquery
  " if executable('cquery')
  "   call add(g:lsp_item, {
  "        \ 'name': 'cquery',
  "        \ 'cmd': {server_info->['cquery']},
  "        \ 'root_uri': {
  "        \   server_info->lsp#utils#path_to_uri(
  "        \     lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json')
  "        \   )
  "        \ },
  "        \ 'initialization_options': { 'cacheDirectory': '~/tmp/cquery/cache' },
  "        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
  "        \ })
  " endif

  function! s:lsp_user_setup() abort
    for item in g:lsp_item
      call lsp#register_server(item)
    endfor
  endfunction

  function! s:lsp_user_buffer_enabled() abort
    " option setup
    " use asyncomplete-omni
    " setlocal omnifunc=lsp#complete
    " always general setting use
    " setlocal signcolumn=yes
    " help use hover(vim use :help in general setting)
    " currently K map vim-ref
    " if &filetype !=# 'vim'
    "   setlocal keywordprg=:LspHover
    " endif

    " keymap
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <f2> <plug>(lsp-rename)
    nmap <buffer> <f1> <plug>(lsp-hover)
  endfunction

  augroup vimrc_init-vim-lsp
    autocmd!
    autocmd User lsp_setup call s:lsp_user_setup()
    autocmd User lsp_buffer_enabled call s:lsp_user_buffer_enabled()
  augroup END

'''
hook_post_source = '''
  " from https://mattn.kaoriya.net/software/vim/20191231213507.htm
  command! LspDebugEnable  let lsp_log_verbose=1 | let lsp_log_file=expand('~/lsp.log')
  command! LspDebugDisable let lsp_log_verbose=0 | unlet lsp_log_file
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
hook_add = '''
  let g:vsnip_snippet_dir = expand($XDG_CONFIG_HOME . '/' . 'snippet')
'''
hook_post_source = '''
  imap <expr> <C-b>  vsnip#available(1)  ? '<Plug>(vsnip-expand)'         : '<C-b>'
  imap <expr> <C-CR> vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-CR>'
  smap <expr> <C-CR> vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-CR>'
  imap <expr> <C-n>  vsnip#available(1)  ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
  smap <expr> <C-n>  vsnip#available(1)  ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
  imap <expr> <C-p>  vsnip#available(-1) ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'
  smap <expr> <C-p>  vsnip#available(-1) ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
depends = ['vim-lsp', 'asyncomplete.vim', 'vim-vsnip']

[[plugins]]
repo = 'mattn/vim-lsp-settings'
merged = 0
depends = ['vim-lsp']
hook_add = '''
  " install path
  " ~/.local/share/vim-lsp-settings/
  let g:lsp_settings_servers_dir  = expand($HOME . '/.local/share/vim-lsp-settings')
  call mkdir(g:lsp_settings_servers_dir, "p")

  " config
  let g:lsp_settings = {}
  let g:lsp_settings['yaml-language-server'] = {
            \ 'workspace_config': {
            \    'yaml': {
            \      'completion': v:true,
            \      'hover': v:true,
            \      'validate': v:true,
            \    },
            \    'gopls': {
            \      'staticcheck': v:true,
            \      'completeUnimported': v:true,
            \      'usePlaceholders': v:true,
            \      'completionDocumentation': v:true,
            \      'hoverKind': 'SynopsisDocumentation',
            \    },
            \    'pyls':{
            \      'plugins': {
            \        'jedi_completion': {
            \          'include_params': v:true,
            \        },
            \      },
            \    }
            \  }
            \}
'''

[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'
depends = ['vim-lsp']

[[plugins]]
repo = 'mattn/vim-lsp-icons'
merged = 0
depends = ['vim-lsp']

# autocomplete
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
  " let g:asyncomplete_auto_popup = 0

  let g:asyncomplete_popup_delay = 200

  " default
  let g:asyncomplete_triggers = extend(get(g:,'asyncomplete_triggers',{}),
        \ {
        \   '*'  : ['.', '>', ':'],
        \ })

  " completeopt manual set
  let g:asyncomplete_auto_completeopt = 0
'''
hook_post_source = '''
  imap     <c-space>      <Plug>(asyncomplete_force_refresh)

  " augroup vimrc_init-asyncomplete
  "   autocmd!
  "   " asyncomplete original
  "   " autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
  "   " my refine
  "   autocmd CompleteDone * if pumvisible() | pclose | endif
  " augroup END
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = ['vim-lsp', 'asyncomplete.vim']

[[plugins]]
repo = 'prabirshrestha/asyncomplete-omni.vim'
depends = ['asyncomplete.vim']
hook_source = '''
  autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
   \ 'name': 'omni',
   \ 'whitelist': ['*'],
   \ 'completor': function('asyncomplete#sources#omni#completor')
   \  }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
depends = ['asyncomplete.vim']
hook_source = '''
  autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
  \ 'name': 'file',
  \ 'whitelist': ['*'],
  \ 'priority': 10,
  \ 'completor': function('asyncomplete#sources#file#completor')
  \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-tags.vim'
depends = ['asyncomplete.vim']
hook_source = '''
  autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
    \ 'name': 'tags',
    \ 'whitelist': ['c','cpp','objc','objcpp','vim','javascript','typescript'],
    \ 'completor': function('asyncomplete#sources#tags#completor'),
    \ 'config': {
    \    'max_file_size': 350000000,
    \  },
    \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-emoji.vim'
depends = ['asyncomplete.vim']
hook_source = '''
  autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#emoji#get_source_options({
  \ 'name': 'emoji',
  \ 'whitelist': ['*'],
  \ 'completor': function('asyncomplete#sources#emoji#completor'),
  \ }))
'''

[[plugins]] # completion <C-X><C-U> (user completion)
repo = 'junegunn/vim-emoji'
hook_post_source = '''
  " set default user completion function
  set completefunc=emoji#complete

  " replace :emoji: to <unicode-emoji>
  " try echo unicode
  function! s:emoji_unicode_echo ()
    let l:keywords=&iskeyword
    setlocal iskeyword-=:
    let l:word = expand('<cword>')
    let l:gh_word = ':'.l:word.':'
    if '' !=? emoji#for(l:word)
      echo 'emoji :'.expand('<cword>').'-'.emoji#for(l:word)
    else
      echo 'emoji :'.expand('<cword>').'-'.'(no match)'
    endif
    let &iskeyword=l:keywords
  endfunction

  nnoremap <silent> <Leader>e :call <SID>emoji_unicode_echo()<CR>

  function! s:emoji_unicode_replace ()
    let l:keywords=&iskeyword
    setlocal iskeyword-=:
    let l:word = expand('<cword>')
    if word == ''
      let &iskeyword=l:keywords
      return
    endif

    let l:gh_word = ':'.l:word.':'
    if '' !=? emoji#for(l:word)
      " „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„ÇíwordÂàÜÂâç„Å´Âãï„Åã„Åó„Å¶„Åã„Çâ„ÄÅ„Åù„ÅÆ‰ΩçÁΩÆ„Åã„ÇâÂæå„ÅÆÊúÄÂàù„ÅÆword„ÇíÁΩÆÊèõ„Åô„Çã
      " ÂÆå‰∫ÜÂæå„ÄÅ‰ΩçÁΩÆ„ÇíÁßªÂãï
      "   123456789ABCD
      "   smile :smile:
      "   ^____ origin cursor
      "   ^____ replace match start (word match pos - colon_size (min:1))
      "   ^____ if success; search emoji start (same replace match)

      "   smile :smile:
      "   __^__ origin cursor
      "   ^____ replace match start (word match pos - colon_size (min:1))
      "   ^____ if success; search emoji start (same replace match)

      "   smile :smile:
      "   ________^__ origin cursor
      "   ___^_______ word matchs start (origin - word len(min:1))
      "   ______^____ replace match start (word match pos - colon_size (min:1))
      "   ______^____ if success; search emoji start (same replace match)

      let pos = getcurpos()
      let word_col = pos[2]
      let target_col = pos[2]
      if pos[2] != 1
        " Ë°åÈ†≠‰ª•Â§ñ„ÅØ‰ΩçÁΩÆË£úÊ≠£„Åô„Çã
        let word_col = pos[2] - strlen(l:word)
        if word_col < 1 | let word_col = 1 | endif

        let target_col = word_col
        if word_col != 1
          call cursor(pos[1], word_col)
          call search(l:word)

          let target_pos = getcurpos()
          let target_col = target_pos[2] - 1 " : „ÅÆÂàÜ
          if target_col < 1 | let target_col = 1 | endif
        endif
      endif

      call cursor(pos[1], target_col)

      let l:success = 0
      try
        call execute('substitute' . '/' . '\%#'.l:gh_word . '/' . '\=emoji#for(l:word)' . '/')
        let l:success = 1
      catch
        " let l:success = 0
      finally
        call cursor(pos[1], pos[2])
      endtry

      if l:success
        call cursor(pos[1], target_col)
        call search(emoji#for(l:word), 'z')
      endif

    endif
    let &iskeyword=l:keywords
  endfunction

  nnoremap <silent> <Leader>E :call <SID>emoji_unicode_replace()<CR>
'''

# CtrlP
# other plugin within ctrlp extension
# - vim-pass
# - yankround.vim
# - spelunker.vim
# - (lazy plugins)
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
# For collision avoidance, dependent setting : lightline
depends = ['lightline.vim']
hook_add = '''
  " based on http://leafcage.hateblo.jp/entry/2013/10/21/lightlinevim-customize
  function! CtrlPEnter()
    let w:lightline = 0
  endfunction

  function! CtrlPLeave()
    call g:lightline#update()
  endfunction

  " # Ê§úÁ¥¢„ÅÆÈöõ„Å´200[ms]„ÅÆ„Ç¶„Çß„Ç§„Éà„ÇíÂÖ•„Çå„Çã(1ÊñáÂ≠óÂÖ•Âäõ„ÅÆÂ∫¶„Å´Ê§úÁ¥¢ÁµêÊûú„Åå„Ç≥„É≠„Ç≥„É≠Â§â„Çè„Çã„ÅÆ„ÅåÊ∞ó„Å´ÂÖ•„Çâ„Å™„ÅÑ„Åü„ÇÅ)
  let g:ctrlp_lazy_update = 200

  let g:ctrlp_buffer_func = {
        \ 'enter': 'CtrlPEnter',
        \ 'exit' : 'CtrlPLeave'
        \}

  " based on https://kamiya555.github.io/2016/07/24/vim-ctrlp/
  " „Ç≠„É£„ÉÉ„Ç∑„É•„Éá„Ç£„É¨„ÇØ„Éà„É™
  let g:ctrlp_use_caching = 1
  let g:ctrlp_cache_dir = expand($HOME) . '/.cache/ctrlp'

  " „É´„Éº„Éà„Éë„Çπ„Å®Ë™çË≠ò„Åï„Åõ„Çã„Åü„ÇÅ„ÅÆ„Éï„Ç°„Ç§„É´
  " let g:ctrlp_root_markers = ['Gemfile', 'pom.xml', 'build.xml']
  " CtrlP„ÅÆ„Ç¶„Ç£„É≥„Éâ„Ç¶ÊúÄÂ§ßÈ´ò„Åï
  let g:ctrlp_max_height = min([(&lines/3), 20])
  autocmd MyAutoGroup VimResized * let g:ctrlp_max_height = min([(&lines/3), 20])

  " ÁÑ°Ë¶ñ„Åô„Çã„Éá„Ç£„É¨„ÇØ„Éà„É™
  " let g:ctrlp_custom_ignore = {
  "   \ 'dir':  '\v[\/]\.(svn|git|hg|bzr)$',
  "   \ 'file': '\v\.(exe|so|dll)$',
  "   \ 'link': 'some_bad_symbolic_links',
  "   \ }

  " based on https://qiita.com/0829/items/7053b6e3371592e4fbe6
  " based on https://christina04.hatenablog.com/entry/2014/10/30/100612
  " based on https://postd.cc/how-to-boost-your-vim-productivity/
  if executable('pt')
    " let fallback_command = 'pt --nocolor --nogroup --hidden -S -l -g "" %s'
    let fallback_command = 'pt --nocolor --nogroup -S -l -g "" %s'
  elseif executable('ag')
    " let fallback_command = 'ag -a --nocolor --nogroup --hidden -S -l -g "" %s'
    let fallback_command = 'ag -a --nocolor --nogroup -S -l -g "" %s'
  endif
  if exists('fallback_command')
    if executable('nkf')
      let fallback_command =  fallback_command . ' | nkf -S -w'
    endif
  endif

  let g:ctrlp_user_command = {
        \   'types': {
        \     1: ['.git', 'cd %s && git ls-files'  ],
        \     2: ['.hg' , 'hg --cwd %s locate -I .'],
        \   },
        \ }
  if exists('fallback_command')
    let g:ctrlp_use_caching  = 0
    let g:ctrlp_user_command = extend(g:ctrlp_user_command,
          \ { 'fallback': fallback_command }, "keep")
  endif

  " let g:ctrlp_cmd = 'CtrlP' " default

  " ext
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + [ 'dir' ,'line' , 'undo', 'changes','mixed' ]
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['tag']
'''

[[plugins]]
repo = 'FelikZ/ctrlp-py-matcher'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  " python2 deprecated
  if has('python3')
    let g:ctrlp_match_func = {'match' : 'pymatcher#PyMatch'}
  endif
'''

[[plugins]] # based on https://blog.kaneshin.co/entry/vim-advent-calendar-2012
repo = 'kaneshin/ctrlp-git-log'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['git_log']
'''

[[plugins]] # based on https://mattn.kaoriya.net/software/vim/20120427205409.htm
repo = 'mattn/ctrlp-mark'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['mark']
'''

[[plugins]] # based on https://mattn.kaoriya.net/software/vim/20120427205409.htm
repo = 'mattn/ctrlp-register'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['register']
'''

[[plugins]] # based on https://mattn.kaoriya.net/software/vim/20120427205409.htm
repo = 'mattn/ctrlp-launcher'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['launcher']

  let g:ctrlp_launcher_file = expand($HOME . '/.vim/' . 'launcher')
  nmap <silent> <F9> :CtrlPLauncher<CR>
'''

[[plugins]]
repo = 'ompugao/ctrlp-history'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['history/search', 'history/cmd']
'''

[[plugins]]
repo = 'prabirshrestha/ctrlp-env'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['env']
'''

[[plugins]]
repo = 'tacahiroy/ctrlp-funky'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['funky']
'''

[[plugins]]
repo = 'ompugao/ctrlp-locate'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['locate']
'''

[[plugins]]
repo = 'hara/ctrlp-colorscheme'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
       \ + ['colorscheme']
'''

[[plugins]]
repo = 'endel/ctrlp-filetype.vim'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
       \ + ['filetype']
'''

[[plugins]]
# repo = 'sgur/ctrlp-extensions.vim'
repo = 'tsuyoshicho/ctrlp-extensions.vim'
rev  = 'develop'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  " ['yankring', 'menu', 'cmd']

  " yank use LeafCage/yankround.vim
  let g:ctrlp_yankring_disable = 1
  " let g:ctrlp_yankring_limit = 50 " default 100
  " let g:ctrlp_yankring_minimum_chars = 4 " default 2

  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['menu', 'cmd']

  let g:ctrlp_cmd = 'CtrlPMenu' " menu override
'''

[[plugins]]
repo = 'zeero/vim-ctrlp-help'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['help']
'''

[[plugins]]
# repo = 'gasparch/ctrlp-tagbar.vim'
repo = 'tsuyoshicho/ctrlp-tagbar.vim'
rev  = 'develop'
merged = 0
depends = ['ctrlp.vim', 'tagbar']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
       \ + ['tagbar']
'''

[[plugins]]
repo = 'DavidEGx/ctrlp-smarttabs'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['smarttabs']

  " let g:ctrlp_smarttabs_modify_tabline = 1
  " If 1 will highlight the selected file in the tabline.
  " (Default: 1)

  " let g:ctrlp_smarttabs_reverse = 1
  " Reverse the order in which files are displayed.
  " (Default: 1)

  let g:ctrlp_smarttabs_exclude_quickfix = 1
  " Exclude quickfix buffers.
  " (Default: 0)
'''

[[plugins]] # w3m,lynx,wwwrenderer-vim„ÅÆ„Å©„Çå„Åã„ÅåÂøÖË¶Å
repo = 'thinca/vim-ref'
depends = ['wwwrenderer-vim']
# on_if= 'executable("lynx")' ÁèæÂú®„ÅÆÁí∞Â¢ÉÊßãÁØâ„Åß„ÅØ„Éë„Çπ„ÇíÈÄö„Åó„Å¶„Å™„ÅÑ
hook_add = '''
  " " Ëá™ÂãïË®≠ÂÆö
  " let g:ref_source_webdict_cmd
  " " 'lynx -dump -nonumbers %s'
  " " '=wwwrenderer#render("%s")'
  "
  " " same as ref_source_webdict_cmd
  " let g:ref_rfc_cmd
'''

[[plugins]] # JavaDoc
repo = 'LeafCage/ref-javadoc'
depends = ['vim-ref']
hook_add = '''
  " " Ëá™ÂãïË®≠ÂÆö
  " " same as ref_source_webdict_cmd
  " let g:ref_javadoc_cmd
  " " localpath
  " let g:ref_javadoc_path
'''

[[plugins]] # info
repo = 'eiiches/vim-ref-info'
depends = ['vim-ref']

# QuickRun
[[plugins]]
repo = 'osyo-manga/quickrun-hook-u-nya-'

[[plugins]]
repo = 'mattn/vim-quickrunex'

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = ['vimproc.vim', 'quickrun-hook-u-nya-',  'open-browser.vim', 'vim-quickrunex']
hook_add = '''
  " <Plug>(precious-quickrun-op) in osyo-manga/vim-precious
  if dein#tap('vim-precious')
    nnoremap <Leader>o <Plug>(precious-quickrun-op)
  endif


  " if untype buffer, prev run timing type detect work hook
  "
  " config
  let g:quickrun_config = get(g:, 'quickrun_config', {})

  " global
  let g:quickrun_config['_'] = extend({
        \  'outputter'                       : 'error',
        \  'outputter/error/success'         : 'buffer',
        \  'outputter/error/error'           : 'loclist',
        \  'outputter/buffer/split'          : ':rightbelow 8sp',
        \  'outputter/buffer/close_on_empty' : 1,
        \  'outputter/buffer/running_mark'   : '[running...]',
        \  "hook/slash/enable" : 1,
        \  'hook/u_nya_/enable'              : 1,
        \}, get(g:quickrun_config, '_', {}), "keep")

  " per filetype
  let qucikrun_filetype_encode_fixlist = ['python', 'ruby', 'markdown']

  let g:quickrun_config['vim'] = extend({
        \  'hook/slash/enable' : 0,
        \}, get(g:quickrun_config, 'vim', {}), "keep")

  let g:quickrun_config['markdown'] = extend({
        \  'type' : 'markdown/pandoc',
        \  'outputter' : 'browser',
        \}, get(g:quickrun_config, 'markdown', {}), "keep")

  let g:quickrun_config['python'] = extend({
        \  'hook/time/enable' : 1,
        \}, get(g:quickrun_config, 'python', {}), "keep")

  let g:quickrun_config['ruby'] = extend({
        \  'hook/time/enable' : 1,
        \}, get(g:quickrun_config, 'ruby', {}), "keep")

  " shift jis: 'cp932'
  " shift jis: 'cp65001'
  let is_windows = has('win32') || has('win64') " later as historical ==|| has('win16') || has('win95')==
  if is_windows
    for typename in qucikrun_filetype_encode_fixlist
      let g:quickrun_config[typename]['hook/output_encode/enable'] = 1
      let g:quickrun_config[typename]['hook/output_encode/encoding'] = 'cp932'
    endfor
  endif

  function s:vimproc_ok() abort
    let vimproc = 0
    try
      silent call vimproc#version()
      let vimproc = 1
    catch
    endtry

    return vimproc
  endfunction

  if s:vimproc_ok()
    let g:quickrun_config._['runner'] = 'vimproc'
    let g:quickrun_config._['runner/vimproc/sleep'] = 30
    let g:quickrun_config._['runner/vimproc/updatetime'] = 50
  elseif has('job')
    let g:quickrun_config._['runner'] = 'job'
  " elseif has('clientserver')
  "   let g:quickrun_config._['runner'] = 'remote'
  else
    let g:quickrun_config._['runner'] = 'system'
  endif
'''
hook_post_source = '''
  let s:slash_hook = {
            \ "name" : "slash",
            \ "kind" : "hook",
            \ "config" : {
            \  "enable"     : 0,
            \  "shellslash" : 0,
            \ }
            \}

  function! s:slash_hook.on_hook_loaded(session, context) abort
    if self.config.enable && exists('+shellslash')
      let self.config.shellslash = &shellslash
      set noshellslash
    endif
  endfunction

  function! s:slash_hook.on_exit(session, context) abort
    if self.config.enable && exists('+shellslash')
      let &shellslash = self.config.shellslash
    endif
  endfunction

  call quickrun#module#register(s:slash_hook, 1)
  unlet s:slash_hook

  " :QuickRun ÊôÇ„Å´ quickfix „ÅÆ‰∏≠Ë∫´„Çí„ÇØ„É™„Ç¢„Åô„Çã
  " „Åì„ÅÜ„Åó„Å¶„Åä„Åã„Å™„ÅÑ„Å® quickfix „ÅÆ‰∏≠Ë∫´„ÅåÊÆã„Å£„Åü„Åæ„Åæ„Å´„Å™„Å£„Å¶„Åó„Åæ„ÅÜ„Åü„ÇÅ
  let s:clear_hook = {
            \   "name" : "clear_quickfix",
            \   "kind" : "hook",
            \}

  function! s:clear_hook.on_normalized(session, context)
    call setqflist([])
  endfunction

  call quickrun#module#register(s:clear_hook, 1)
  unlet s:clear_hook
'''

# UI
# based on https://tmnm.tech/2017/10/11/vim-setting-with-cica/
# need powerline,devicons font
[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
  " „Éï„Ç©„É´„ÉÄ„Ç¢„Ç§„Ç≥„É≥„ÅÆË°®Á§∫„ÇíON
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
  " let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = 'ÔÑî'
  " ? let g:WebDevIconsDefaultFolderOpenSymbol = 'ÔÑï'
'''
hook_post_source = '''
  let g:NERDTreeDirArrowExpandable  = nr2char(0xf0da) " ÔÉö nf-fa-caret_right
  let g:NERDTreeDirArrowCollapsible = nr2char(0xf0d7) " ÔÉó nf-fa-caret_down

  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html']     = nr2char(0xe736) " 'Óú∂'
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['css']      = nr2char(0xe749) " 'Óùâ'
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['markdown'] = nr2char(0xf48a) " 'Ôíä'
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md']       = nr2char(0xf48a) " 'Ôíä'
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['txt']      = nr2char(0xf0f6) " 'ÔÉ∂'
'''

# currently off
# [[plugins]]
# repo = 'wsdjeg/dein-ui.vim'
# depends = ['dein.vim']
# hook_add = '''
#   let g:spacevim_plugin_manager = 'dein'
#   let g:spacevim_plugin_manager_max_processes = 4
# '''

[[plugins]]
repo = 'haya14busa/dein-command.vim'
depends = ['dein.vim']

# Colortheme solarized,solarized8...
[[plugins]]
repo = 'vim-scripts/ScrollColors'

[[plugins]]
repo = 'mopp/sky-color-clock.vim'
depends = ['vim-pass']
hook_add = '''
  " Configure variables.
  " let g:sky_color_clock#latitude
  " let g:sky_color_clock#color_stops
  let g:sky_color_clock#datetime_format = '%m/%d(%a) %H:%M'
  let g:sky_color_clock#enable_emoji_icon = 1
  " let g:sky_color_clock#openweathermap_api_key = "<token>"
  call pass#get_startup('g:sky_color_clock#openweathermap_api_key','Develop/OpenWeatherMap')
  let g:sky_color_clock#temperature_color_stops =  [
            \ [263, '#f0f8ff'],
            \ [288, '#ffffff'],
            \ [313, '#dc143c']
            \ ]

  " Tokyo     https://openweathermap.org/city/1850147
  let g:sky_color_clock#openweathermap_city_id = "1850147"
'''

# Git
[[plugins]]
repo = 'tpope/vim-git'
hook_add = '''
  let g:gitcommit_cleanup = 'scissors'
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
# on_if= 'executable("git")'
hook_add = '''
  augroup vimrc_init-fugitive
    autocmd!
    " based on https://qiita.com/yuku_t/items/0c1aff03949cb1b8fe6b
    autocmd QuickFixCmdPost Ggrep nested cwindow
    " see https://vi.stackexchange.com/questions/11502/how-to-execute-a-command-when-leaving-the-fugitiveblame-window
    " autocmd FileType fugitiveblame nnoremap <silent><buffer> q :q<CR>wincmd =
    autocmd FileType fugitiveblame nnoremap <silent><buffer> q :q<CR><C-W>=
  augroup END
'''

[[plugins]]
repo = 'tpope/vim-rhubarb'
depends = ['vim-fugitive','vim-pass']
# on_if= 'executable("hub")'
hook_add = '''
  " github token
  call pass#get_startup('g:RHUBARB_TOKEN','Develop/Github')
'''

[[plugins]] # git log show
repo = 'junegunn/gv.vim'
depends = ['vim-fugitive']
hook_add = '''
'''

[[plugins]]
repo = 'idanarye/vim-merginal'
depends = ['vim-fugitive']

[[plugins]]
repo = 'cohama/agit.vim'
# on_if= 'executable("git")'

[[plugins]]
repo = 'lambdalisue/gina.vim'
# on_if= 'executable("git")'

[[plugins]]
repo = 'rhysd/git-messenger.vim'

[[plugins]] # git commit
repo = 'teddywing/vim-gitcha'

[[plugins]] # git rebase
repo = 'hotwatermorning/auto-git-diff'
hook_post_source = '''
  function! s:setup_auto_git_diff() abort
    nmap <buffer><C-l> <Plug>(auto_git_diff_scroll_manual_update)
    nmap <buffer><C-n> <Plug>(auto_git_diff_scroll_down_half)
    nmap <buffer><C-p> <Plug>(auto_git_diff_scroll_up_half)
  endfunction
  augroup vimrc_init-auto-git-diff
    autocmd FileType gitrebase call <SID>setup_auto_git_diff()
  augroup END
'''

[[plugins]]
repo = 'mhinz/vim-signify'
hook_add = '''
  let g:signify_sign_add               = nr2char(0x271a) " '‚úö'
  let g:signify_sign_change            = nr2char(0x279c) " '‚ûú'
  let g:signify_sign_delete            = nr2char(0x2718) " '‚úò'
  let g:signify_sign_delete_first_line = nr2char(0x2717) " '‚úó'

  " highlight line
  " let g:signify_line_highlight = 1
'''
hook_post_source = '''
  " Need a quick update updatetime
  set updatetime=200

  " highlight SignifySignAdd       guifg=#009900 guibg=<X> ctermfg=2 ctermbg=<Y>
  " highlight SignifySignChange    guifg=#bbbb00 guibg=<X> ctermfg=3 ctermbg=<Y>
  " highlight SignifySignDelete    guifg=#ff2222 guibg=<X> ctermfg=1 ctermbg=<Y>
  " highlight                      gui=underlined term=underlined cterm=underlined
  " highlight SignifySignDeleteFirstLine
  " highlight link SignifySignDeleteFirstLine SignifySignDelete

  nnoremap <Leader>hp :SignifyHunkDiff<cr>
  " nnoremap <Leader>hs :<cr>    " staging
  nnoremap <Leader>hu :SignifyHunkUndo<cr>
'''

[[plugins]]
repo = 'christoomey/vim-conflicted'

# self create plugin statusline updater
[[plugins]]
repo  = 'tsuyoshicho/StatuslineUpateTimer.vim'
hook_add = '''
  " update evenly 15sec
  let g:StatuslineUpdateTimer#updatetime = 15 * 1000

  " set adjust
  let g:StatuslineUpdateTimer#adjust_minute = 1
'''

[[plugins]]
repo  = 'KabbAmine/vCoolor.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['vim-fugitive','vim-gitgutter','sky-color-clock.vim','vim-devicons','StatuslineUpateTimer.vim']
# Ë®≠ÂÆö„Åô„Çã„Éï„Ç©„É≥„Éà„ÅØ powerline patched
hook_add = '''
  " lightline setting in lightline-delphinus
'''

[[plugins]]
repo = 'taohexxx/lightline-buffer'
depends = ['lightline.vim', 'vim-devicons']
hook_add = '''
  " lightline-buffer setting in lightline-delphinus

  " lightline-buffer ui settings
  " replace these symbols with ascii characters if your environment does not support unicode
  let g:lightline_buffer_logo = nr2char(0xe7c5)  " original 'Ô£ø '
  let g:lightline_buffer_readonly_icon = 'ÓÇ¢'
  let g:lightline_buffer_modified_icon = '‚ú≠'
  let g:lightline_buffer_git_icon = 'ÓÇ† '
  let g:lightline_buffer_ellipsis_icon = '..'
  let g:lightline_buffer_expand_left_icon = '‚óÄ '
  let g:lightline_buffer_expand_right_icon = ' ‚ñ∂'
  let g:lightline_buffer_active_buffer_left_icon = ''
  let g:lightline_buffer_active_buffer_right_icon = ''
  " let g:lightline_buffer_separator_icon = '  '

  " enable devicons, only support utf-8
  " require <https://github.com/ryanoasis/vim-devicons>
  let g:lightline_buffer_enable_devicons = 1

  " lightline-buffer function settings
  let g:lightline_buffer_show_bufnr = 1

  " :help filename-modifiers
  " let g:lightline_buffer_fname_mod = ':t'
  let g:lightline_buffer_fname_mod = ':p:~'

  " " hide buffer list
  " let g:lightline_buffer_excludes = ['vimfiler']
  "
  " " max file name length
  " let g:lightline_buffer_maxflen = 30
  "
  " " max file extension length
  " let g:lightline_buffer_maxfextlen = 3
  "
  " " min file name length
  " let g:lightline_buffer_minflen = 16
  "
  " " min file extension length
  " let g:lightline_buffer_minfextlen = 3
  "
  " " reserve length for other component (e.g. info, close)
  " let g:lightline_buffer_reservelen = 20
'''
hook_post_source = '''
  " need lightline-buffer
  set showtabline=2 " Â∏∏„Å´„Çø„Éñ„É©„Ç§„É≥„ÇíË°®Á§∫
  set hidden        " „Éê„ÉÉ„Éï„Ç°„ÅåÁ∑®ÈõÜ‰∏≠„Åß„ÇÇ„Åù„ÅÆ‰ªñ„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÈñã„Åë„Çã„Çà„ÅÜ„Å´

  " " remap arrow keys
  " nnoremap <Left>  :bprev<CR>
  " nnoremap <Right> :bnext<CR>
  " nnoremap <C-Left>  :tabprevious<CR>
  " nnoremap <C-Right> :tabnext<CR>

  " current lightline-buffer off
  " gui use text tabline
  " if has('gui_running')
  "   set guioptions-=e
  " endif
'''

[[plugins]]
repo = 'tsuyoshicho/lightline-lsp'
depends = ['lightline.vim']

# lightline setting use lightline-delphinus
# based on https://qiita.com/delphinus/items/af5809b587f2af0a9f7f
[[plugins]]
repo = 'delphinus/lightline-delphinus'
depends = ['lightline.vim', 'lightline-buffer', 'vim-devicons', 'tagbar', 'iceberg', 'gruvbox', 'vim-anzu', 'vim-submode', 'lightline-lsp']
# Ë®≠ÂÆö„Åô„Çã„Éï„Ç©„É≥„Éà„ÅØ powerline patched
hook_add = '''
  let g:lightline_delphinus_use_powerline_glyphs = 1
  let g:lightline_delphinus_use_nerd_fonts_glyphs = 1
  let g:lightline_delphinus_colorscheme = 'solarized_improved'
  " let g:lightline_delphinus_colorscheme = 'nord_improved'
'''
hook_post_source = '''
  " enable setting
  let g:lightline_delphinus_tagbar_enable = 1
  let g:lightline_delphinus_gitgutter_enable = 1

  " custom setting
  " add sky_color,custom lineinfo
  "
  " lineinfo function disable
  " 'lineinfo':     'lightline#delphinus#components#lineinfo',

  " lightline support mode; disable showmode
  " set noshowmode
  " temp off

  " „ÉÜ„Éº„Éû
  " lightline
  " \ 'colorscheme': 'wombat',
  " \ 'colorscheme': 'solarized',
  " \ 'colorscheme': 'jellybeans' ,
  " \ 'colorscheme': 'landscape ' ,
  " lightline-delphinus
  " \ 'colorscheme': 'solarized_improved',
  " \ 'colorscheme': 'nord_improved',
  " \ 'colorscheme': g:lightline_delphinus_colorscheme,
  " iceberg
  " \ 'colorscheme': 'iceberg',
  " gruvbox
  " \ 'colorscheme': 'gruvbox',

  " powerline „Çª„Éë„É¨„Éº„Çø„Éº
  " \ 'separator': { 'left': 'ÓÇ∞', 'right': 'ÓÇ≤' },
  " \ 'subseparator': { 'left': 'ÓÇ±', 'right': 'ÓÇ≥' }
  " or
  " \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
  " \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
  " or
  " \ 'separator': { 'left': nr2char(0xe0b0), 'right': nr2char(0xe0b2) },
  " \ 'subseparator': { 'left': nr2char(0xe0b1), 'right': nr2char(0xe0b3) }

  " vim-powerline „Çª„Éë„É¨„Éº„Çø„Éº
  " \ 'separator': {'left': '‚ÆÄ', 'right': '‚ÆÇ'},
  " \ 'subseparator': {'left': '‚ÆÅ', 'right': '‚ÆÉ'}
  " or
  " \ 'separator': { 'left': "\u2b80", 'right': "\u2b82" },
  " \ 'subseparator': { 'left': "\u2b81", 'right': "\u2b83" }
  " or
  " \ 'separator': { 'left': nr2char(0x2b80), 'right': nr2char(0x2b82) },
  " \ 'subseparator': { 'left': nr2char(0x2b81), 'right': nr2char(0x2b83) }

  " " based on https://tmnm.tech/2017/10/11/vim-setting-with-cica/
  " " need vim-devicons
  " function! LightLineFiletype()
  "   return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  " endfunction
  "
  " " need vim-devicons
  " function! LightLineFileformat()
  "   return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  " endfunction
  "
  " " use myself plugin custom clock
  " function! LightlineClock()
  "   return g:StatuslineUpdateTimer#clock()
  " endfunction

  " lineinfo custom   ÓÇ°:ÓÇ£  / nf-pl-line_number e0a1 : nf-ple-column_number e0a3
  " original
  " \   'lineinfo': "\ue0a1" . ':' . "\ue0a3" . ' ' . '%l[%L]:%-v',
  " fix
  " \   'lineinfo': nr2char(0xe0a1) . ':' . nr2char(0xe0a3) . ' ' . '%l[%L]:%-v',

  " lightline colorscheme setting in night-and-day
  " if has('gui_running')
  "   " gui„Å™„Çâgruvbox,cli„ÅØiceberg„Å´„Åô„Çã
  "   let g:lightline = {
  "        \ 'colorscheme': 'gruvbox',
  "        \  }
  " else
  "   let g:lightline = {
  "        \ 'colorscheme': 'iceberg',
  "        \  }
  " endif

  " ale
  " \ [ 'filename', 'currenttag', 'ale_error', 'ale_warning', 'ale_ok' ]
  let g:lightline = extend(g:lightline , {
     \ 'active': {
     \   'left' : [
     \     [ 'mode', 'paste' ],
     \     [ 'fugitive', 'gitgutter' ],
     \     [ 'filepath' ],
     \     [ 'filename', 'currenttag',  'lsp_status_error', 'lsp_status_warning', 'lsp_status_ok']
     \   ],
     \   'right': [
     \     [ 'sky_color_clock' ],
     \     [ 'lineinfo', 'percent', 'anzu', 'submode' ],
     \     [ 'fileformat', 'fileencoding', 'filetype' ],
     \     [ 'char_code' ],
     \   ],
     \ },
     \ 'inactive': {
     \   'left'  : [ [ 'filepath' ], [ 'filename' ] ],
     \   'right' : [ [ 'sky_color_clock' ], [ 'lineinfo' ], [ 'percent' ] ],
     \ },
     \ 'tabline': {
     \   'left'  : [ [ 'bufferinfo' ],
     \               [ 'separator' ],
     \               [ 'tabs' ], ],
     \   'right' : [ [ 'close' ], ],
     \ },
     \ 'component': {
     \   'lineinfo'        : nr2char(0xe0a1) . ':' . nr2char(0xe0a3) . ' ' . '%l[%L]:%-v',
     \   'sky_color_clock' : "%#SkyColorClock#%{' ' . sky_color_clock#statusline() . ' '}%#SkyColorClockTemp# ",
     \   'separator'       : nr2char(0xff9e8),
     \ },
     \ 'component_function': {
     \   'modified'     : 'lightline#delphinus#components#modified',
     \   'readonly'     : 'lightline#delphinus#components#readonly',
     \   'fugitive'     : 'lightline#delphinus#components#fugitive',
     \   'filepath'     : 'lightline#delphinus#components#filepath',
     \   'filename'     : 'lightline#delphinus#components#filename',
     \   'fileformat'   : 'lightline#delphinus#components#fileformat',
     \   'filetype'     : 'lightline#delphinus#components#filetype',
     \   'fileencoding' : 'lightline#delphinus#components#fileencoding',
     \   'mode'         : 'lightline#delphinus#components#mode',
     \   'char_code'    : 'lightline#delphinus#components#charcode',
     \   'percent'      : 'lightline#delphinus#components#percent',
     \   'currenttag'   : 'lightline#delphinus#components#currenttag',
     \   'gitgutter'    : 'lightline#delphinus#components#gitgutter',
     \   'anzu'         : 'anzu#search_status',
     \   'submode'      : 'submode#current',
     \   'bufferinfo'   : 'lightline#buffer#bufferinfo',
     \ },
     \ 'component_function_visible_condition': {
     \   'mode'         : 1,
     \   'currenttag'   : 0,
     \   'char_code'    : 0,
     \   'fileformat'   : 0,
     \   'filetype'     : 0,
     \   'fileencoding' : 0,
     \ },
     \ 'component_expand': {
     \   'lsp_status_error'     : 'lightline#lsp#status_error',
     \   'lsp_status_warning'   : 'lightline#lsp#status_warning',
     \   'lsp_status_ok'        : 'lightline#lsp#status_ok',
     \   'ale_error'     : 'lightline#delphinus#components#ale_error',
     \   'ale_warning'   : 'lightline#delphinus#components#ale_warning',
     \   'ale_ok'        : 'lightline#delphinus#components#ale_ok',
     \   'buffercurrent' : 'lightline#buffer#buffercurrent',
     \   'bufferbefore'  : 'lightline#buffer#bufferbefore',
     \   'bufferafter'   : 'lightline#buffer#bufferafter',
     \ },
     \ 'component_type': {
     \   'lsp_status_error'     : 'error',
     \   'lsp_status_warning'   : 'warning',
     \   'lsp_status_ok'        : 'ok',
     \   'ale_error'     : 'error',
     \   'ale_warning'   : 'warning',
     \   'ale_ok'        : 'ok',
     \   'buffercurrent' : 'tabsel',
     \   'bufferbefore'  : 'raw',
     \   'bufferafter'   : 'raw',
     \ },
     \ 'component_raw': {
     \    'sky_color_clock': 1,
     \ },
     \ 'separator': { 'left': nr2char(0xe0b0), 'right': nr2char(0xe0b2) },
     \ 'subseparator': { 'left': nr2char(0xe0b1), 'right': nr2char(0xe0b3) }
     \ }
     \)

  " lightline-buffer
  " \ 'tabline': {
  " \   'left'  : [ [ 'bufferinfo' ],
  " \               [ 'separator' ],
  " \               [ 'bufferbefore', 'buffercurrent', 'bufferafter' ], ],
  " \   'right' : [ [ 'close' ], ],

  " colorscheme setting in night-and-day

  " force re-init
  call lightline#init()
  call lightline#colorscheme()
  call lightline#update()
'''

[[plugins]]
# repo = 'nightsense/night-and-day'
repo = 'tsuyoshicho/night-and-day'
# rev  = 'develop'
rev  = 'feature/autoload'
merged = 0
depends = ['lightline-delphinus', 'iceberg.vim', 'gruvbox', 'vim-solarized8', 'vim-colors-github', 'material.vim', 'gruvbox-material', 'rigel', 'inkstained-vim', 'hydrangea-vim']
hook_add = '''
  " " colorscheme Âá¶ÁêÜ - ÂøÖË¶Å„Å™‰æùÂ≠òÈñ¢‰øÇ„ÅØÂá¶ÁêÜ„Åô„Çã„Åì„Å®
  " if has('gui_running')
  "   " set background=light
  "   set background=dark
  "   if v:vim_did_enter
  "     colorscheme gruvbox
  "   else
  "     augroup vimrc_init-night-and-day
  "       autocmd!
  "       autocmd VimEnter * nested colorscheme gruvbox | autocmd! colorscheme-init
  "     augroup END
  "   endif
  " else
  "   " set background=dark
  "   " iceberg„ÅØdarkÂõ∫ÂÆö
  "   set background=dark
  "   if v:vim_did_enter
  "     colorscheme iceberg
  "   else
  "     augroup vimrc_init-night-and-day
  "       autocmd!
  "       autocmd VimEnter * nested colorscheme iceberg | autocmd! colorscheme-init
  "     augroup END
  "   endif
  " endif

  if has('gui_running')
    " gui„Å™„Çâgruvbox,cli„ÅØiceberg„Å´„Åô„Çã(base)
    let g:nd_themes = [
      \ ['sunrise+0',   'solarized8',       'light', 'solarized_improved'],
      \ ['sunrise+1/4', 'github',           'light', 'github'],
      \ ['sunrise+2/4', 'gruvbox-material', 'light', 'gruvbox_material'],
      \ ['sunrise+3/4', 'inkstained',       'light', 'inkstained'],
      \ ['sunset+0',    'solarized8',       'dark',  'solarized_improved'],
      \ ['sunset+1/7',  'hydrangea',        'dark',  'hydrangea'],
      \ ['sunset+2/7',  'iceberg',          'dark',  'iceberg'],
      \ ['sunset+3/7',  'forest-night',     'dark',  'forest_night'],
      \ ['sunset+4/7',  'material',         'dark',  'material_vim'],
      \ ['sunset+5/7',  'gruvbox',          'dark',  'gruvbox'],
      \ ['sunset+6/7',  'rigel',            'dark',  'rigel'],
      \]
  else
    let g:nd_themes = [
      \ ['sunrise+0', 'gruvbox', 'dark', 'gruvbox'],
      \ ['sunset+0',  'iceberg', 'dark', 'iceberg'],
      \]
  endif

  let g:nd_latitude  = '30' " Asia/Tokyo 35
  let g:nd_timeshift =  '0' " shift minutes

  " " debug
  " let g:nd_themes = [
  "     \ ['09:00', 'gruvbox', 'dark', 'gruvbox'],
  "     \ ['18:12', 'iceberg', 'dark', 'iceberg'],
  "     \]

  let g:nd_lightline = 1
'''

# Edit operation

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'junegunn/goyo.vim'
hook_post_source = '''
  " currently, statusline update and enter/leave (rel)number
  " manipulation conflict.
  nnoremap <silent> <F12> :Goyo<CR>
'''

[[plugins]]
repo = 'junegunn/limelight.vim'
hook_add = '''
  if !has("gui_running")
    " Color name (:help cterm-colors) or ANSI code
    let g:limelight_conceal_ctermfg = 'gray'
    let g:limelight_conceal_ctermfg = 240
  else
    " Color name (:help gui-colors) or RGB color
    let g:limelight_conceal_guifg = 'DarkGray'
    let g:limelight_conceal_guifg = '#777777'
  endif

  " Default: 0.5
  " let g:limelight_default_coefficient = 0.7

  " Number of preceding/following paragraphs to include (default: 0)
  " let g:limelight_paragraph_span = 1

  " Beginning/end of paragraph
  "   When there's no empty line between the paragraphs
  "   and each paragraph starts with indentation
  " let g:limelight_bop = '^\s'
  " let g:limelight_eop = '\ze\n^\s'

  " Highlighting priority (default: 10)
  "   Set it to -1 not to overrule hlsearch
  " let g:limelight_priority = -1
'''
hook_post_source = '''
  " with Goyo
  autocmd! MyAutoGroup User GoyoEnter Limelight
  autocmd! MyAutoGroup User GoyoLeave Limelight!
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  " vim„ÇíÁ´ã„Å°‰∏ä„Åí„Åü„Å®„Åç„Å´„ÄÅËá™ÂãïÁöÑ„Å´vim-indent-guides„Çí„Ç™„É≥„Å´„Åô„Çã
  " let g:indent_guides_enable_on_vim_startup = 1

  " based on https://wonderwall.hatenablog.com/entry/2016/03/21/205741
  let g:indent_guides_guide_size = 1

  " ÁÑ°Âäπ„Å´„Åó„Åü„ÅÑ„Éï„Ç°„Ç§„É´„Çø„Ç§„Éó„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å™Ë®≠ÂÆö„ÇíËøΩÂä†„ÄÇ
  let g:indent_guides_exclude_filetypes = ['help', 'startify', 'nerdtree', 'tagbar', 'unite']
'''

# exclusive : need indent-guide off
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  " enable
  " let g:indentLine_enabled = 0
  let g:indentLine_enabled = 1

  " need UTF-8 ‚îÜ U+2506
  " let g:indentLine_first_char = '‚îÜ'
  " let g:indentLine_char       = '‚îÜ'
  " need UTF-8 ‚¶ô U+299A
  let g:indentLine_first_char = '‚¶ô'
  let g:indentLine_char       = '‚¶ô'
  " need patched font : Óò° nf-indent-line / e621
  " let g:indentLine_first_char = nr2char(0xe621)
  " let g:indentLine_char       = nr2char(0xe621)

  " no conceal for edit
  let g:indentLine_fileTypeExclude = ['help','json']

  " conceallevel/concealcursor set in vimrc
  let g:indentLine_setConceal = 0
'''
hook_post_source = '''
  " based on http://d.hatena.ne.jp/osyo-manga/20140722/1406040828
  augroup vimrc_init-indentLine
    autocmd!
    " precious.vim „Åå filetype „ÇíÂàá„ÇäÊõø„Åà„ÇãÂ∫¶„Å´ indentLine „Çí„É™„Çª„ÉÉ„Éà„Åô„Çã
    autocmd User PreciousFileType IndentLinesReset
  augroup END
'''

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'

# commentout
[[plugins]]
repo = 'tyru/caw.vim'

# latest vim support auto bracket
# [[plugins]]
# repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'tweekmonster/braceless.vim'
# merged = 0
hook_add = '''
  augroup vimrc_init-braceless
    autocmd!
    autocmd FileType python BracelessEnable +indent
    autocmd FileType haml,yaml,coffee BracelessEnable +indent +fold +highlight
  augroup END
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
# repo = 'sgur/vim-editorconfig'
hook_add = '''
  " editorconfig/editorconfig-vim
  let g:EditorConfig_exclude_patterns = ['fugitive://.\*', 'scp://.\*']

  " sgur/vim-editorconfig
  " editorconfig root„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åù„Åì„ÇíËµ∑ÁÇπ„Å®„Åó„ÅüÁõ∏ÂØæÂá¶ÁêÜ„Å´„Åô„Çã
  " let g:editorconfig_root_chdir = 1 " default:0
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'mattn/vim-sonictemplate'

[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
  " let g:matchup_matchparen_enabled = 0
  " if use parenmatch
  " deliver text object a%/i%
'''

[[plugins]] # paren match rainbow
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle

  let g:rainbow_conf = {
    \ 'separately': {
    \   'cpp': {
    \     'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/\</ end=/\>/ fold','start=/{/ end=/}/ fold'],
    \   },
    \   'markdown': {
    \     'parentheses_options': 'containedin=markdownCode contained',
    \   },
    \   'vim': {
    \     'parentheses_options': 'containedin=vimFuncBody',
    \   },
    \   'css': 0,
    \ },
    \}
'''

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
  let g:quickhl_manual_enable_at_startup = 1
'''
hook_post_source = '''
  nmap <Space>m <Plug>(quickhl-manual-this)
  xmap <Space>m <Plug>(quickhl-manual-this)
  nmap <Space>M <Plug>(quickhl-manual-reset)
  xmap <Space>M <Plug>(quickhl-manual-reset)

  nmap <Space>j <Plug>(quickhl-cword-toggle)
  nmap <Space>] <Plug>(quickhl-tag-toggle)

  let g:quickhl_manual_keywords = [
        \ 'Tsuyoshi CHO',
        \ 'Tsuyoshi.CHO',
        \ 'tsuyoshi.cho',
        \ 'Tsuyoshi_CHO',
        \ 'tsuyoshi_cho',
        \ 'tsuyoshicho',
        \]
'''

[[plugins]]
repo = 'thinca/vim-zenspace'
hook_post_source = '''
  " https://qiita.com/tmsanrinsha/items/d6c11f2b7788eb24c776

  " add non zenspace (UCS spaces)
  augroup vimrc_init-zenspace
    autocmd!
    autocmd VimEnter,WinEnter * nested match ZenSpace /\%u180E\|\%u2000\|\%u2001\|\%u2002\|\%u2003\|\%u2004\|\%u2005\|\%u2006\|\%u2007\|\%u2008\|\%u2009\|\%u200A\|\%u2028\|\%u2029\|\%u202F\|\%u205F\|\%u3000/
  augroup END
'''

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
  let g:lexima_no_default_rules = 1

  let g:lexima_enable_basic_rules = 1
  let g:lexima_enable_newline_rules = 1
  let g:lexima_enable_space_rules = 1
  let g:lexima_enable_endwise_rules = 1
'''
hook_post_source = '''
  call lexima#set_default_rules()

  let s:cr_key = '<CR>'
  let s:additional_rules = [
        \ {
        \   'char': '<CR>',
        \   'input': s:cr_key,
        \   'input_after': '<CR>' . '@enduml',
        \   'at': '\%(^\s*#.*\)\@<!@startuml\>.*\%#',
        \   'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1' . '\@enduml',
        \   'filetype': 'plantuml',
        \   'syntax': [],
        \ },
        \ {
        \   'char': '<CR>',
        \   'input': s:cr_key,
        \   'input_after': '<CR>' . '@endgantt',
        \   'at': '\%(^\s*#.*\)\@<!@startgantt\>.*\%#',
        \   'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1' . '\@endgantt',
        \   'filetype': 'plantuml',
        \   'syntax': [],
        \ },
        \ {
        \   'char': '<CR>',
        \   'input': s:cr_key,
        \   'input_after': '<CR>' . '@endditaa',
        \   'at': '\%(^\s*#.*\)\@<!@startditaa\>.*\%#',
        \   'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1' . '\@endditaa',
        \   'filetype': 'plantuml',
        \   'syntax': [],
        \ },
        \ {
        \   'char': '<CR>',
        \   'input': s:cr_key,
        \   'input_after': '<CR>' . '@enddot',
        \   'at': '\%(^\s*#.*\)\@<!@startdot\>.*\%#',
        \   'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1' . '\@enddot',
        \   'filetype': 'plantuml',
        \   'syntax': [],
        \ },
        \ {
        \   'char': '<CR>',
        \   'input': s:cr_key,
        \   'input_after': '<CR>' . '@endsalt',
        \   'at': '\%(^\s*#.*\)\@<!@startsalt\>.*\%#',
        \   'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1' . '\@endsalt',
        \   'filetype': 'plantuml',
        \   'syntax': [],
        \ },
        \ {
        \   'char': '<CR>',
        \   'input': s:cr_key,
        \   'input_after': '<CR>' . '@endwbs',
        \   'at': '\%(^\s*#.*\)\@<!@startwbs\>.*\%#',
        \   'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1' . '\@endwbs',
        \   'filetype': 'plantuml',
        \   'syntax': [],
        \ },
        \ {
        \   'char': '<CR>',
        \   'input': s:cr_key,
        \   'input_after': '<CR>' . '@endmindmap',
        \   'at': '\%(^\s*#.*\)\@<!@startmindmap\>.*\%#',
        \   'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1' . '\@endmindmap',
        \   'filetype': 'plantuml',
        \   'syntax': [],
        \ },
        \]

  for rule in s:additional_rules
    call lexima#add_rule(rule)
  endfor

  " rule from https://github.com/rinx/dotfiles/blob/master/vimrc
  " markdown
  call lexima#add_rule({'char': '**', 'input_after': '**', 'filetype': ['markdown']})
  call lexima#add_rule({'char': '<BS>', 'at': '\*\%#\*', 'delete': 1, 'filetype': ['markdown']})
  call lexima#add_rule({'char': '__', 'input_after': '__', 'filetype': ['markdown']})
  call lexima#add_rule({'char': '<BS>', 'at': '_\%#_', 'delete': 1, 'filetype': ['markdown']})
  call lexima#add_rule({'char': '~~', 'input_after': '~~', 'filetype': ['markdown']})
  call lexima#add_rule({'char': '<BS>', 'at': '\~\%#\~', 'delete': 1, 'filetype': ['markdown']})
  call lexima#add_rule({'char': '<CR>', 'at': '^\s*\*\s.*\%#', 'input': '<CR>* ', 'filetype': ['markdown']})
  call lexima#add_rule({'char': '<CR>', 'at': '^\s*+\s.*\%#', 'input': '<CR>+ ', 'filetype': ['markdown']})
  call lexima#add_rule({'char': '<CR>', 'at': '^\s*-\s.*\%#', 'input': '<CR>- ', 'filetype': ['markdown']})

  " keymapping
  " see https://qiita.com/yami_beta/items/26995a5c382bd83ac38f
  inoremap <C-l> <C-r>=lexima#insmode#leave(1, '<LT>C-G>U<LT>RIGHT>')<CR>
'''

# [[plugins]]
# repo = 'deathlyfrantic/lexima-template-rules'
# depends = ['lexima.vim']

[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
  " let g:clever_f_ignore_case           = 1
  let g:clever_f_smart_case            = 1
  let g:clever_f_use_migemo            = 1
  let g:clever_f_fix_key_direction     = 1
  let g:clever_f_chars_match_any_signs = ";:"

  let g:clever_f_not_overwrites_standard_mappings = 1
'''
hook_post_source = '''
    nmap f <Plug>(clever-f-f)
    xmap f <Plug>(clever-f-f)
    omap f <Plug>(clever-f-f)
    nmap F <Plug>(clever-f-F)
    xmap F <Plug>(clever-f-F)
    omap F <Plug>(clever-f-F)
    " t use tab
    " nmap t <Plug>(clever-f-t)
    " xmap t <Plug>(clever-f-t)
    " omap t <Plug>(clever-f-t)
    " nmap T <Plug>(clever-f-T)
    " xmap T <Plug>(clever-f-T)
    " omap T <Plug>(clever-f-T)
'''

[[plugins]]
repo = 'kana/vim-smartword'
hook_add = '''
  map w  <Plug>(smartword-w)
  map b  <Plug>(smartword-b)
  map e  <Plug>(smartword-e)
  map ge <Plug>(smartword-ge)

  " " basic map
  " map <Leader>w  <Plug>(smartword-w)
  " map <Leader>b  <Plug>(smartword-b)
  " map <Leader>e  <Plug>(smartword-e)
  " map <Leader>ge <Plug>(smartword-ge)
  " " direct normally
  " noremap <Leader>w  w
  " noremap <Leader>b  b
  " noremap <Leader>e  e
  " noremap <Leader>ge ge
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
depends = ['vim-repeat']
hook_add = '''
  " based on http://haya14busa.com/mastering-vim-easymotion/
  " based on http://haya14busa.com/vim_migemo_search/
  " based on http://haya14busa.com/vim-lazymotion-on-speed/
  " based on http://haya14busa.com/vim-easymotion-ver-3-dot-0-overwin-motions/

  " Disable default mapping
  let g:EasyMotion_do_mapping = 0

  " if executable('cmigemo')
  " endif
  " Â∏∏„Å´Ë®≠ÂÆö
  let g:EasyMotion_use_migemo = 1

  " smartcase
  let g:EasyMotion_smartcase = 1

  " use repeat '.'
  let g:EasyMotion_keys='hklyuiopnm,qwertzxcvbasdgjf;'

  " Jump to first match with enter & space
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
'''
hook_post_source = '''
  " <Leader>f{char} to move to {char}
  map  <Leader>f <Plug>(easymotion-bd-f)
  nmap <Leader>f <Plug>(easymotion-overwin-f)

  " s{char}{char} to move to {char}{char}
  " map s <Plug>(easymotion-bd-f2)
  map ss <Plug>(easymotion-bd-f2)
  " nmap s <Plug>(easymotion-overwin-f2)
  nmap ss <Plug>(easymotion-overwin-f2)

  " Move to line
  map <Leader>L <Plug>(easymotion-bd-jk)
  nmap <Leader>L <Plug>(easymotion-overwin-line)
  " JK motions: Line motions
  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)

  " Move to word
  map  <Leader>w <Plug>(easymotion-bd-w)
  nmap <Leader>w <Plug>(easymotion-overwin-w)
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_post_source = '''
  " see https://wonderwall.hatenablog.com/entry/2016/03/29/215904
  " map to gA
  " Start interactive EasyAlign for a motion/text object (e.g. gAip)
  nmap gA <Plug>(EasyAlign)
  " Start interactive EasyAlign in visual mode (e.g. vipgA)
  xmap gA <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'severin-lemaignan/vim-minimap'
# repo = 'koron/minimap-vim'
hook_post_source = '''
  nmap <silent> <F7> :MinimapToggle<CR>
'''

[[plugins]] # Doxygen
repo = 'vim-scripts/DoxygenToolkit.vim'
depends = ['vital.vim']
hook_post_source = '''
  let now  = g:V.import('DateTime').now()
  let year = string(now.year())

  " basic
  " let g:DoxygenToolkit_briefTag_pre = '@brief '
  " let g:DoxygenToolkit_briefTag_post = ''
  " let g:DoxygenToolkit_templateParamTag_pre = '@tparam '
  " let g:DoxygenToolkit_templateParamTag_post = ''
  " let g:DoxygenToolkit_paramTag_pre = '@param '
  " let g:DoxygenToolkit_paramTag_post = ''
  " let g:DoxygenToolkit_returnTag = '@return '
  " let g:DoxygenToolkit_throwTag_pre = '@throw ' " @exception is also valid
  " let g:DoxygenToolkit_throwTag_post = ''

  " let g:DoxygenToolkit_fileTag = '@file '
  " let g:DoxygenToolkit_authorTag = '@author '
  " let g:DoxygenToolkit_dateTag = '@date '
  " let g:DoxygenToolkit_versionTag = '@version '
  " let g:DoxygenToolkit_undocTag = 'DOX_SKIP_BLOCK'
  " let g:DoxygenToolkit_blockTag = '@name '
  " let g:DoxygenToolkit_classTag = '@class '

  " format tuning : default OK
  " let g:DoxygenToolkit_cinoptions = 'c1C1'

  " Work area format
  let g:DoxygenToolkit_authorName='Tsuyoshi CHO'
  " projct specfic
  " let g:DoxygenToolkit_blockHeader = ''
  " let g:DoxygenToolkit_blockFooter = ''
  " let g:DoxygenToolkit_licenseTag = 'need simple license string: (C) 2009 - ' . year . ' xxx Corporation All rights reserved.'
  " let g:DoxygenToolkit_versionString = 1.0

  " let g:DoxygenToolkit_compactOneLineDoc = 'no'
  " let g:DoxygenToolkit_compactDoc = 'no'
  " let g:DoxygenToolkit_ignoreForReturn =

  " Style
  " let g:DoxygenToolkit_commentType = 'C++'
  let g:DoxygenToolkit_commentType = 'C'
  " C type
  " let g:DoxygenToolkit_startCommentTag = '/** '
  " let g:DoxygenToolkit_startCommentBlock = '/* '
  " let g:DoxygenToolkit_interCommentTag = '* '
  " let g:DoxygenToolkit_interCommentBlock = '* '
  " let g:DoxygenToolkit_endCommentTag = '*/'
  " let g:DoxygenToolkit_endCommentBlock = '*/'

  " C++ type
  " let g:DoxygenToolkit_startCommentTag = '/// '
  " let g:DoxygenToolkit_startCommentBlock = '// '
  " let g:DoxygenToolkit_interCommentTag = '/// '
  " let g:DoxygenToolkit_interCommentBlock = '// '
  " let g:DoxygenToolkit_endCommentTag = ''
  " let g:DoxygenToolkit_endCommentBlock = ''

  " need tuning
  " let g:DoxygenToolkit_maxFunctionProtoLines = 10

  " let g:DoxygenToolkit_briefTag_className = 'no'
  " let g:DoxygenToolkit_briefTag_structName = 'no'
  " let g:DoxygenToolkit_briefTag_enumName = 'no'
  " let g:DoxygenToolkit_briefTag_namespaceName = 'no'
  " let g:DoxygenToolkit_briefTag_funcName = 'no'

  " let g:DoxygenToolkit_keepEmptyLineAfterComment = 'no'

  " let g:DoxygenToolkit_python_autoRemoveSelfParam = 'yes'
  " let g:DoxygenToolkit_python_autoFunctionReturn = 'yes'
'''

[[plugins]] # Doxygen and other
repo = 'kkoomen/vim-doge'

[[plugins]] # PowerShell
repo = 'PProvost/vim-ps1'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  " based on https://blog.scimpr.com/2018/04/12/vim%E3%81%A7%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%80%E3%82%A6%E3%83%B3%E3%82%92%E7%B7%A8%E9%9B%86%E3%81%99%E3%82%8B%E3%80%9Ctextlint%E3%80%81tagbar/
  " let g:tagbar_ctags_bin = ''
  let g:tagbar_width = 35 "„Éá„Éï„Ç©„É´„Éà„ÅØ40

  " universal-ctags is 1
  let uctags_use = 1

  if !uctags_use
    " asciidoc support:need .ctags option
    let g:tagbar_type_asciidoc = {
          \ 'ctagstype' : 'asciidoc',
          \ 'kinds' : [
          \   'h:table of contents',
          \   'a:anchors:1',
          \   't:titles:1',
          \   'n:includes:1',
          \   'i:images:1',
          \   'I:inline images:1'
          \ ],
          \ 'sort' : 0
          \}
  else
    let g:tagbar_type_asciidoc = {
          \ 'ctagstype' : 'asciidoc',
          \ 'kinds' : [
          \   's:sections',
          \   'S:level 2 sections',
          \   't:level 3 sections',
          \   'T:level 4 sections',
          \   'u:level 5 sections',
          \   'a:anchors'
          \ ],
          \ 'sort' : 0
          \}
  endif

  if !uctags_use
    " markdown support:need .ctags option
    let g:tagbar_type_markdown = {
          \ 'ctagstype' : 'markdown',
          \ 'kinds' : [
          \   'h:Heading_L1',
          \   'i:Heading_L2',
          \   'k:Heading_L3'
          \ ],
          \ 'sort' : 0
          \}
  else
    let g:tagbar_type_markdown = {
          \ 'ctagstype' : 'markdown',
          \ 'kinds' : [
          \   'c:chapsters',
          \   's:sections',
          \   'S:subsections',
          \   't:subsubsections',
          \   'T:level 4 subsections',
          \   'u:level 5 subsections',
          \   'r:regex'
          \ ],
          \ 'sort' : 0
          \}
  endif

  if !uctags_use
    " javascript support:need .ctags option
    " https://github.com/romainl/ctags-patterns-for-javascript
    let g:tagbar_type_javascript = {
          \ 'ctagstype': 'javascript',
          \ 'kinds': [
          \ 'A:arrays',
          \ 'P:properties',
          \ 'T:tags',
          \ 'O:objects',
          \ 'G:generator functions',
          \ 'F:functions',
          \ 'C:constructors/classes',
          \ 'M:methods',
          \ 'V:variables',
          \ 'I:imports',
          \ 'E:exports',
          \ 'S:styled components'
          \ ]
          \}
  else
    " defalut defined
    " override
    let g:tagbar_type_javascript = {
          \ 'ctagstype': 'javascript',
          \ 'kinds': [
          \    'f:functions',
          \    'c:classes',
          \    'm:methods',
          \    'p:properties',
          \    'C:constants',
          \    'v:global variables',
          \    'g:generators',
          \    'G:getters',
          \    'S:setters'
          \ ]
          \}
  endif

  if !uctags_use
    " typescript support:need .ctags option
    " https://github.com/jb55/typescript-ctags
    let g:tagbar_type_typescript = {
          \ 'ctagstype': 'typescript',
          \ 'kinds': [
          \   'c:classes',
          \   'n:modules',
          \   'f:functions',
          \   'v:variables',
          \   'v:varlambdas',
          \   'm:members',
          \   'i:interfaces',
          \   'e:enums',
          \ ]
          \}
  else
    let g:tagbar_type_typescript = {
          \ 'ctagstype': 'typescript',
          \ 'kinds': [
          \   'f:functions',
          \   'c:classes',
          \   'i:interfaces',
          \   'g:enums',
          \   'e:enumerators (values inside an enumeration)',
          \   'm:methods',
          \   'n:namespaces',
          \   'z:function parameters inside function definitions [off]',
          \   'p:properties',
          \   'v:variables',
          \   'l:local variables [off]',
          \   'C:constants',
          \   'G:generators',
          \   'a:aliases'
          \ ]
          \}
  endif
'''
hook_post_source = '''
  nmap <silent> <F8> :TagbarToggle<CR>
'''

# [[plugins]] # Chrome/Firefox GhostText Extention
# repo = 'pandysong/ghost-text.vim'

[[plugins]] # GnuPG Encrypt
repo = 'jamessan/vim-gnupg'

# [[plugins]] # RFC
# repo = 'zh4ui/vim-rfc-reader'
# hook_add = '''
#   " vim-ref rfc„Å®ÈÄ£Êê∫
#   autocmd MyAutoGroup FileType ref-rfc setlocal filetype=rfc
# '''

[[plugins]] # RFC
repo = 'vim-scripts/rfc-syntax'
hook_add = '''
  " vim-ref rfc„Å®ÈÄ£Êê∫
  autocmd MyAutoGroup FileType ref-rfc setlocal filetype=rfc
'''

[[plugins]] # Qiita
repo = 'cowsys/ctrlp-vimref'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['vimref']
'''

[[plugins]] # Qiita
repo = 'mattn/qiita-vim'
merged = 0
depends = ['ctrlp.vim']
hook_add = '''
  let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
        \ + ['qiita']
'''

[[plugins]] # Slack
repo = 'higashi000/sarahck.vim'
depends = ['slackstatus.vim', 'webapi-vim','vim-pass']

[[plugins]] # Slack
repo = 'mizukmb/slackstatus.vim'
depends = ['webapi-vim','vim-pass']
hook_add = '''
  " slackstatus.vim use g:slackstatus_token
  " sarahck.vim     use g:slackToken
  " team m-falcon
  call pass#get_startup('g:slackstatus_token','Message/Slack/team-m-falcon.legacy')
  call pass#get_startup('g:slackToken',       'Message/Slack/team-m-falcon.legacy')
  " vim-jp
  " call pass#get_startup('g:slackstatus_token','Message/Slack/vim-jp.legacy')
  " call pass#get_startup('g:slackToken',       'Message/Slack/vim-jp.legacy')


  function! s:slack_team_completion(A,L,P) abort
    let team_list = ['team-m-falcon','vim-jp']
    return join(team_list,"\n")
  endfunction

  function s:slack_token_change(team) abort
    let path = 'Message/Slack/' . a:team . '.legacy'

    let token = pass#get(path)

    let g:slackstatus_token = token
    let g:slackToken        = token
  endfunction

  command! -nargs=1 -complete=custom,<SID>slack_team_completion SlackWorkspaceChange :call <SID>slack_token_change(<f-args>)
'''

[[plugins]] # Mastodon
repo = 'mattn/vim-mastodon'
depends = ['webapi-vim','vim-pass']
hook_add = '''
  " mstdn.jp
  let g:mastodon_host = 'mstdn.jp'
  call pass#get_startup('g:mastodon_access_token','Message/Mastodon/mstdn.jp')

  function! s:mastodon_completion(A,L,P) abort
    let host_list = ['mstdn.jp']
    return join(host_list,"\n")
  endfunction

  function s:mastodon_change_hosttoken(host) abort
    let path = 'Message/Mastodon/' . a:host
    let g:mastodon_host = a:host
    let g:mastodon_access_token = pass#get(path)
  endfunction

  command! -nargs=1 -complete=custom,<SID>mastodon_completion MastodonHostChange :call <SID>mastodon_change_hosttoken(<f-args>)
'''

[[plugins]] # plantuml
repo = 'aklt/plantuml-syntax'
hook_add = '''
  let is_windows = has('win32') || has('win64') " later as historical ==|| has('win16') || has('win95')==
  if is_windows && executable('plantumlc.exe')
    let g:plantuml_executable_script = 'plantumlc -tsvg'
  endif
'''

[[plugins]] # man
repo = 'lambdalisue/vim-manpager'

[[plugins]] # fzf
repo = 'junegunn/fzf'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
merged = 0
depends = ['fzf']
hook_add = '''
  let g:fzf_command_prefix = 'Fzf'

  " fzf„Åã„Çâ„Éï„Ç°„Ç§„É´„Å´„Ç∏„É£„É≥„Éó„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã
  let g:fzf_buffers_jump = 1

  " Customize fzf colors to match your color scheme
  let g:fzf_colors = {
        \ 'fg':      ['fg', 'Normal'],
        \ 'bg':      ['bg', 'Normal'],
        \ 'hl':      ['fg', 'Comment'],
        \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
        \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
        \ 'hl+':     ['fg', 'Statement'],
        \ 'info':    ['fg', 'PreProc'],
        \ 'border':  ['fg', 'Ignore'],
        \ 'prompt':  ['fg', 'Conditional'],
        \ 'pointer': ['fg', 'Exception'],
        \ 'marker':  ['fg', 'Keyword'],
        \ 'spinner': ['fg', 'Label'],
        \ 'header':  ['fg', 'Comment'],
        \}
'''
hook_post_source = '''
  " see https://qiita.com/hisawa/items/fc5300a526cb926aef08
  " ,<C-]>„Åß„Çø„Ç∞Ê§úÁ¥¢
  nnoremap <silent> <leader><C-]> :call fzf#vim#tags(expand('<cword>'))<CR>

  " based on https://qiita.com/Sa2Knight/items/6635af9fc648a5431685
  nnoremap [fzf]     <Nop>
  nmap     <leader>z [fzf]

  function! s:fzf_command(cmd) abort
    return g:fzf_command_prefix . a:cmd
  endfunction

  nnoremap <silent><expr> [fzf]f ':' . <SID>fzf_command('GFiles')  . '<CR>'
  nnoremap <silent><expr> [fzf]F ':' . <SID>fzf_command('GFiles?') . '<CR>'
  nnoremap <silent><expr> [fzf]b ':' . <SID>fzf_command('Buffers') . '<CR>'
  nnoremap <silent><expr> [fzf]l ':' . <SID>fzf_command('BLines')  . '<CR>'
  nnoremap <silent><expr> [fzf]h ':' . <SID>fzf_command('History') . '<CR>'
  nnoremap <silent><expr> [fzf]m ':' . <SID>fzf_command('Mark')    . '<CR>'
'''

[[plugins]] # fzf
repo = 'yuki-ycino/fzf-preview.vim'
depends = ['fzf']

[[plugins]] # fzf
repo = 'n04ln/yankee.vim'
depends = ['fzf']
hook_add = '''
  let g:yankee_buf_list = [
        \ '""', '"*', '"+', '"^',
        \ '":', '".', '"%',
        \ '"0', '"1', '"2', '"3', '"4', '"5', '"6', '"7', '"8', '"9',
        \ '"a', '"b', '"c', '"d', '"e', '"f', '"g', '"h', '"i', '"j',
        \]
'''

[[plugins]] # orgmode
repo = 'jceb/vim-orgmode'

[[plugins]] # memo
repo = 'Shougo/junkfile.vim'
hook_add = '''
  let g:junkfile#directory = expand($XDG_CACHE_HOME . '/' . 'junkfile')
'''

[[plugins]] # memo
repo = 'mattn/vim-gist'
depends = ['vim-pass']
hook_add = '''
  " let g:gist_token = '<token>'
  call pass#get_startup('g:github_user','Develop/Github','username')
  call pass#get_startup('g:gist_token','Develop/Github')
'''

[[plugins]] # memo
repo = 'glidenote/memolist.vim'
depends = ['ctrlp.vim']
merged = 0
hook_add = '''
  let g:memolist_path = expand($HOME) . "/.vim/memo/"
  let g:memolist_template_dir_path = expand($HOME) . "/.vim/memo_template/"

  nnoremap <Leader>mn  :MemoNew<CR>
  nnoremap <Leader>ml  :MemoList<CR>
  nnoremap <Leader>mg  :MemoGrep<CR>

  " suffix type (default markdown)
  let g:memolist_memo_suffix = "md"

  " date format (default %Y-%m-%d %H:%M)
  " ISO8601
  " let g:memolist_memo_date = "%FT%T%z"
  let g:memolist_memo_date = "%F"

  " tags prompt (default 0)
  " let g:memolist_prompt_tags = 1

  " categories prompt (default 0)
  let g:memolist_prompt_categories = 1

  " use qfixgrep (default 0)
  " let g:memolist_qfixgrep = 1

  " use vimfiler (default 0)
  " let g:memolist_vimfiler = 1

  " use fzf (default 0)
  " let g:memolist_fzf = 1

  " remove filename prefix (default 0)
  " let g:memolist_filename_prefix_none = 1

  " use unite (default 0)
  " let g:memolist_unite = 1

  " use arbitrary unite source (default is 'file')
  " let g:memolist_unite_source = "file_rec"

  " use arbitrary unite option (default is empty)
  " let g:memolist_unite_option = "-auto-preview -start-insert"

  " use denite (default 0)
  " let g:memolist_denite = 1

  " use arbitrary denite source (default is 'file_rec')
  " let g:memolist_denite_source = "anything"

  " use arbitrary denite option (default is empty)
  " let g:memolist_denite_option = "anything"

  " use various Ex commands (default '')
  let g:memolist_ex_cmd = 'CtrlP'

  " use delimiter of array in yaml front matter (default is ' ')
  let g:memolist_delimiter_yaml_array = ','

  " use when get items from yaml front matter
  " first line string pattern of yaml front matter (default "==========")
  let g:memolist_delimiter_yaml_start = "---"

  " last line string pattern of yaml front matter (default "- - -")
  let g:memolist_delimiter_yaml_end  = "---"
'''

[[plugins]] # cheat sheet
repo = 'reireias/vim-cheatsheet'
hook_add = '''
  let g:cheatsheet#cheat_file = expand($HOME).'/.vim/cheatsheet.md'
  let g:cheatsheet#vsplit = 1

  " augroup vimrc_init-cheatsheet
  "   autocmd!
  "   if ale
  "   autocmd BufEnter g:cheatsheet#cheat_file ALEDisableBuffer
  " augroup END
'''

[[plugins]] # detect shebang
repo = 'vitalk/vim-shebang'

[[plugins]]
repo = 'yasuhiroki/github-actions-yaml.vim'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
hook_add = '''
  augroup vimrc_init-vim-table-mode
    autocmd!
    " autocmd FileType markdown     let b:table_mode_corner = '|'
    " autocmd FileType rst          let b:table_mode_corner_corner = '+' | let b:table_mode_header_fillchar = '='
    autocmd FileType markdown,rst TableModeEnable
  augroup END

  " default
  " let g:table_mode_corner_corner='+'
  " let g:table_mode_header_fillchar='=' " global only : need -
'''

# EOF
